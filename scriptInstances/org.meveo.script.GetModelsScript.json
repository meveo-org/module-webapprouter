{
  "code" : "org.meveo.script.GetModelsScript",
  "description" : "Retrieve Models available to the user",
  "inputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "Object"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.module.MeveoModule;\r\nimport org.meveo.model.module.MeveoModuleItem;\r\nimport org.meveo.security.MeveoUser;\r\nimport org.meveo.service.admin.impl.MeveoModuleService;\r\nimport org.meveo.service.crm.impl.CurrentUserProducer;\r\nimport org.meveo.service.script.Script;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class GetModelsScript extends Script {\r\n\tpublic static final String CRLF = \"\\r\\n\";\r\n\tpublic static final String TAB = \"\\t\";\r\n\tprivate static final String IMPORT_STATEMENT = \"import * as %s from \\\"./%s.js\\\";\";\r\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\r\n\tprivate static final String AFFIX = \"-UI\";\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GetModelsScript.class);\r\n\r\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate CurrentUserProducer currentUserProducer = getCDIBean(CurrentUserProducer.class);\r\n\r\n\tprivate String moduleCode;\r\n\tprivate Object result;\r\n\r\n\tpublic void setModuleCode(String moduleCode) {\r\n\t\tthis.moduleCode = moduleCode;\r\n\t}\r\n\r\n\tpublic Object getResult() {\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tLOG.debug(\"START - GetModelsScript.execute()\");\r\n\t\tsuper.execute(parameters);\r\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\r\n\t\tLOG.debug(\"parameters: {}\", parameters);\r\n\t\tif (moduleCode == null) {\r\n\t\t\tthrow new BusinessException(\"moduleCode not set\");\r\n\t\t}\r\n\t\tMeveoModule module = meveoModuleService.findByCode(moduleCode);\r\n\t\tMeveoUser user = currentUserProducer.getCurrentUser();\r\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\r\n\r\n\t\tLOG.debug(\"user: {}\", user);\r\n\r\n\t\tif (module != null) {\r\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\r\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\r\n\t\t\tList<String> entityCodes = moduleItems.stream()\r\n\t\t\t\t\t.filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\r\n\t\t\t\t\t.map(entity -> entity.getItemCode())\r\n\t\t\t\t\t.collect(Collectors.toList());\r\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// using user role and permissions, figure out which entities are allowed to be exported\r\n\t\t\t\tLOG.debug(\"user.getRoles(): {}\", user.getRoles());\r\n\t\t\t\tList<String> permissions = user.getRoles().stream().filter(role -> role.startsWith(\"CE_\"))\r\n\t\t\t\t\t\t.collect(Collectors.toList());\r\n\t\t\t\tLOG.debug(\"permissions: {}\", permissions);\r\n\r\n\t\t\t\tList<String> allowedEntities =\r\n\t\t\t\t\t\tentityCodes.stream()\r\n\t\t\t\t\t\t\t\t.filter(entityCode -> permissions.stream()\r\n\t\t\t\t\t\t\t\t\t\t.anyMatch(permission -> permission.contains(entityCode)))\r\n\t\t\t\t\t\t\t\t.collect(Collectors.toList());\r\n\t\t\t\tLOG.debug(\"allowedEntities: {}\", allowedEntities);\r\n\r\n\t\t\t\tList<EntityPermission> entityPermissions = allowedEntities.stream()\r\n\t\t\t\t\t\t.map(entityCode -> {\r\n\t\t\t\t\t\t\tList<String> permissionList = permissions.stream()\r\n\t\t\t\t\t\t\t\t\t.filter(permission -> permission.contains(entityCode))\r\n\t\t\t\t\t\t\t\t\t.map(permission -> permission.substring(permission.indexOf(\"-\") + 1))\r\n\t\t\t\t\t\t\t\t\t.sorted()\r\n\t\t\t\t\t\t\t\t\t.collect(Collectors.toList());\r\n\t\t\t\t\t\t\treturn new EntityPermission(entityCode, permissionList);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.collect(Collectors.toList());\r\n\t\t\t\tLOG.debug(\"entityPermissions: {}\", entityPermissions);\r\n\r\n\t\t\t\t// generate model index.js\r\n\t\t\t\tStringBuilder modelIndexImports = new StringBuilder();\r\n\r\n\t\t\t\tfor (String entityCode : allowedEntities) {\r\n\t\t\t\t\tString modelImport = String.format(IMPORT_STATEMENT, entityCode, entityCode);\r\n\t\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\r\n\t\t\t\t}\r\n\t\t\t\tmodelIndexImports\r\n\t\t\t\t\t\t.append(CRLF)\r\n\t\t\t\t\t\t.append(\"export const MODELS = [ \")\r\n\t\t\t\t\t\t.append(CRLF)\r\n\t\t\t\t\t\t.append(TAB)\r\n\t\t\t\t\t\t.append(String.join(\", \", allowedEntities))\r\n\t\t\t\t\t\t.append(\" ];\")\r\n\t\t\t\t\t\t.append(CRLF);\r\n\r\n\t\t\t\tmodelIndexImports\r\n\t\t\t\t\t\t.append(CRLF)\r\n\t\t\t\t\t\t.append(\"export const ENTITY_PERMISSIONS = { \");\r\n\r\n\t\t\t\tfor (EntityPermission entityPermission : entityPermissions) {\r\n\t\t\t\t\tmodelIndexImports\r\n\t\t\t\t\t\t\t.append(CRLF)\r\n\t\t\t\t\t\t\t.append(TAB)\r\n\t\t\t\t\t\t\t.append(entityPermission.getEntityCode())\r\n\t\t\t\t\t\t\t.append(\": [ \")\r\n\t\t\t\t\t\t\t.append(CRLF)\r\n\t\t\t\t\t\t\t.append(TAB)\r\n\t\t\t\t\t\t\t.append(TAB)\r\n\t\t\t\t\t\t\t.append(String.join(\", \", entityPermission.getPermissions()))\r\n\t\t\t\t\t\t\t.append(\" ], \");\r\n\t\t\t\t}\r\n\t\t\t\tmodelIndexImports.append(\"};\").append(CRLF);\r\n\r\n\t\t\t\t// return model index.js\r\n\t\t\t\tresult = modelIndexImports.toString();\r\n\r\n\t\t\t} catch (Exception exception) {\r\n\t\t\t\tthrow new BusinessException(exception);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new BusinessException(\"Module not found: \" + moduleCode);\r\n\t\t}\r\n\t\tLOG.debug(\"END - GetModelsScript.execute()\");\r\n\t}\r\n}\r\n\r\n\r\nclass EntityPermission {\r\n\tprivate String entityCode;\r\n\tprivate List<String> permissions;\r\n\r\n\tpublic EntityPermission(String entityCode, List<String> permissions) {\r\n\t\tthis.entityCode = entityCode;\r\n\t\tthis.permissions = permissions;\r\n\t}\r\n\r\n\tpublic String getEntityCode() {\r\n\t\treturn entityCode;\r\n\t}\r\n\r\n\tpublic void setEntityCode(String entityCode) {\r\n\t\tthis.entityCode = entityCode;\r\n\t}\r\n\r\n\tpublic List<String> getPermissions() {\r\n\t\treturn permissions;\r\n\t}\r\n\r\n\tpublic void setPermissions(List<String> permissions) {\r\n\t\tthis.permissions = permissions;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"EntityPermission [entityCode=\" + entityCode + \", permissions=\" + permissions + \"]\";\r\n\t}\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}