{
  "code" : "org.meveo.script.GetModelsScript",
  "description" : "Retrieve Models available to the user",
  "inputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "Object"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.customEntities.CustomEntityTemplate;\nimport org.meveo.model.module.MeveoModule;\nimport org.meveo.model.module.MeveoModuleItem;\nimport org.meveo.security.MeveoUser;\nimport org.meveo.service.admin.impl.MeveoModuleService;\nimport org.meveo.service.crm.impl.CurrentUserProducer;\nimport org.meveo.service.script.Script;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GetModelsScript extends Script {\n\tpublic static final String CRLF = \"\\r\\n\";\n\tpublic static final String TAB = \"\\t\";\n\tprivate static final String LOCALHOST = \"http://localhost:8080/\";\n\tprivate static final String IMPORT_STATEMENT = \"import * as %s from \\\"%s/%s.js\\\";\";\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\n\tprivate static final String AFFIX = \"-UI\";\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GetModelsScript.class);\n\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n\tprivate CurrentUserProducer currentUserProducer = getCDIBean(CurrentUserProducer.class);\n\n\tprivate String moduleCode;\n\tprivate Object result;\n\n\tpublic void setModuleCode(String moduleCode) {\n\t\tthis.moduleCode = moduleCode;\n\t}\n\n\tpublic Object getResult() {\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\n\t\tLOG.debug(\"START - GetModelsScript.execute()\");\n\t\tsuper.execute(parameters);\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\n\t\tLOG.debug(\"parameters: {}\", parameters);\n\t\tif (moduleCode == null) {\n\t\t\tthrow new BusinessException(\"moduleCode not set\");\n\t\t}\n\t\tMeveoModule module = meveoModuleService.findByCode(moduleCode);\n\t\tMeveoUser user = currentUserProducer.getCurrentUser();\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\n\n\t\tString appContext = appConfig.getProperty(\"meveo.admin.webContext\", \"\");\n\t\tString serverUrl = appConfig.getProperty(\"meveo.admin.baseUrl\", null);\n\n\t\tString baseUrl = serverUrl;\n\t\tif (baseUrl == null) {\n\t\t\tbaseUrl = LOCALHOST;\n\t\t}\n\n\t\tbaseUrl = baseUrl.strip().endsWith(\"/\") ? baseUrl : baseUrl + \"/\";\n\t\tbaseUrl = baseUrl + appContext;\n\n\t\tString schemaPath = String.format(\"%s/rest/webapp/%s/models\", baseUrl, moduleCode);\n\n\t\tLOG.debug(\"user: {}\", user);\n\n\t\tif (module != null) {\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\n\t\t\tList<String> entityCodes = moduleItems.stream()\n\t\t\t\t\t.filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\n\t\t\t\t\t.map(entity -> entity.getItemCode())\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\n\n\t\t\ttry {\n\t\t\t\t// using user role and permissions, figure out which entities are allowed to be exported\n\t\t\t\tLOG.debug(\"user.getRoles(): {}\", user.getRoles());\n\t\t\t\tList<String> permissions = user.getRoles().stream().filter(role -> role.startsWith(\"CE_\"))\n\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\tLOG.debug(\"permissions: {}\", permissions);\n\n\t\t\t\tList<String> allowedEntities =\n\t\t\t\t\t\tentityCodes.stream()\n\t\t\t\t\t\t\t\t.filter(entityCode -> permissions.stream()\n\t\t\t\t\t\t\t\t\t\t.anyMatch(permission -> permission.contains(entityCode)))\n\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\tLOG.debug(\"allowedEntities: {}\", allowedEntities);\n\n\t\t\t\tList<EntityPermission> entityPermissions = allowedEntities.stream()\n\t\t\t\t\t\t.map(entityCode -> {\n\t\t\t\t\t\t\tList<String> permissionList = permissions.stream()\n\t\t\t\t\t\t\t\t\t.filter(permission -> permission.contains(entityCode))\n\t\t\t\t\t\t\t\t\t.map(permission -> permission.substring(permission.indexOf(\"-\") + 1))\n\t\t\t\t\t\t\t\t\t.sorted()\n\t\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\t\t\t\treturn new EntityPermission(entityCode, permissionList);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\tLOG.debug(\"entityPermissions: {}\", entityPermissions);\n\n\t\t\t\t// generate model index.js\n\t\t\t\tStringBuilder modelIndexImports = new StringBuilder();\n\n\t\t\t\tfor (String entityCode : allowedEntities) {\n\t\t\t\t\tString modelImport = String.format(IMPORT_STATEMENT, entityCode, schemaPath, entityCode);\n\t\t\t\t\tLOG.debug(\"modelImport: {}\", modelImport);\n\t\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\n\t\t\t\t}\n\t\t\t\tmodelIndexImports\n\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t.append(\"export const MODELS = [ \")\n\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t.append(TAB)\n\t\t\t\t\t\t.append(String.join(\", \", allowedEntities))\n\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t.append(\" ];\")\n\t\t\t\t\t\t.append(CRLF);\n\n\t\t\t\tmodelIndexImports\n\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t.append(\"export const ENTITY_PERMISSIONS = { \");\n\n\t\t\t\tfor (EntityPermission entityPermission : entityPermissions) {\n\t\t\t\t\tmodelIndexImports\n\t\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t\t.append(TAB)\n\t\t\t\t\t\t\t.append(entityPermission.getEntityCode())\n\t\t\t\t\t\t\t.append(\": [ \")\n\t\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t\t.append(TAB)\n\t\t\t\t\t\t\t.append(TAB)\n\t\t\t\t\t\t\t.append(String.join(\", \", entityPermission.getPermissions()))\n\t\t\t\t\t\t\t.append(CRLF)\n\t\t\t\t\t\t\t.append(TAB)\n\t\t\t\t\t\t\t.append(\" ], \");\n\t\t\t\t}\n\t\t\t\tmodelIndexImports.append(CRLF).append(\"};\").append(CRLF);\n\n\t\t\t\t// return model index.js\n\t\t\t\tresult = modelIndexImports.toString();\n\n\t\t\t} catch (Exception exception) {\n\t\t\t\tthrow new BusinessException(exception);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new BusinessException(\"Module not found: \" + moduleCode);\n\t\t}\n\t\tLOG.debug(\"END - GetModelsScript.execute()\");\n\t}\n}\n\n\nclass EntityPermission {\n\tprivate String entityCode;\n\tprivate List<String> permissions;\n\n\tpublic EntityPermission(String entityCode, List<String> permissions) {\n\t\tthis.entityCode = entityCode;\n\t\tthis.permissions = permissions;\n\t}\n\n\tpublic String getEntityCode() {\n\t\treturn entityCode;\n\t}\n\n\tpublic void setEntityCode(String entityCode) {\n\t\tthis.entityCode = entityCode;\n\t}\n\n\tpublic List<String> getPermissions() {\n\t\treturn permissions;\n\t}\n\n\tpublic void setPermissions(List<String> permissions) {\n\t\tthis.permissions = permissions;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"EntityPermission [entityCode=\" + entityCode + \", permissions=\" + permissions + \"]\";\n\t}\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}