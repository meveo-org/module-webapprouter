{
  "code" : "org.meveo.script.RunCustomAction",
  "description" : "Run Custom Actions",
  "inputs" : [ {
    "name" : "actionCode",
    "type" : "String"
  }, {
    "name" : "runWith",
    "type" : "EntityList"
  } ],
  "outputs" : [ {
    "name" : "actionCode",
    "type" : "String"
  }, {
    "name" : "runWith",
    "type" : "EntityList"
  }, {
    "name" : "defaultRepository",
    "type" : "Repository"
  }, {
    "name" : "result",
    "type" : "Map<String,Object>"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.elresolver.ELException;\r\nimport org.meveo.model.crm.custom.EntityCustomAction;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.ICustomFieldEntity;\r\nimport org.meveo.model.IEntity;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.service.base.MeveoValueExpressionWrapper;\r\nimport org.meveo.service.custom.EntityCustomActionService;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.script.CustomScriptService;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.service.script.ScriptInstanceService;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class RunCustomAction extends Script {\r\n  private static final String MESSAGE = \"message\";\r\n  private static final Logger LOG = LoggerFactory.getLogger(RunCustomAction.class);\r\n  private EntityCustomActionService ecaService = getCDIBean(EntityCustomActionService.class);\r\n  private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  private ScriptInstanceService scriptInstanceService = getCDIBean(ScriptInstanceService.class);\r\n  private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n  private CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n  private Repository repository;\r\n  private String actionCode;\r\n  private EntityList runWith;\r\n  private Map<String, Object> result;\r\n\r\n  public String getActionCode() {\r\n    return actionCode;\r\n  }\r\n\r\n  public void setActionCode(String actionCode) {\r\n    this.actionCode = actionCode;\r\n  }\r\n\r\n  public EntityList getRunWith() {\r\n    return runWith;\r\n  }\r\n\r\n  public void setRunWith(EntityList runWith) {\r\n    this.runWith = runWith;\r\n  }\r\n\r\n  public Repository getDefaultRepository() {\r\n    if (repository == null) {\r\n      repository = repositoryService.findDefaultRepository();\r\n    }\r\n    return repository;\r\n  }\r\n\r\n  public Map<String, Object> getResult() {\r\n    return result;\r\n  }\r\n\r\n  RunCustomAction() {\r\n    super();\r\n    this.actionCode = \"\";\r\n    this.runWith = null;\r\n    this.result = new HashMap<>();\r\n  }\r\n\r\n  @Override\r\n  public void execute(Map<String, Object> parameters) throws BusinessException {\r\n    super.execute(parameters);\r\n    LOG.debug(\"parameters: {}\", parameters);\r\n    if (this.actionCode == null || this.actionCode.isEmpty()) {\r\n      throw new BusinessException(\"No action code specified. Please specify an action code in the parameters.\");\r\n    }\r\n    if (this.runWith == null) {\r\n      throw new BusinessException(\r\n          \"No entity codes specified. Please specify at least one entity in the parameters.\");\r\n    }\r\n    for (EntityParameter entityParameter : this.runWith.getEntities()) {\r\n      Map<String, Object> singleResult = new HashMap<>();\r\n      try {\r\n        String entityCode = entityParameter.getCode();\r\n        String uuid = entityParameter.getUuid();\r\n        CustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n        Map<String, Object> entity = crossStorageService\r\n            .find(this.getDefaultRepository(), entityTemplate, uuid, true);\r\n        if (entity == null) {\r\n          throw new BusinessException(\"Entity not found: \" + entityParameter);\r\n        }\r\n        LOG.debug(\"entity: {}\", entity);\r\n        LOG.debug(\"this.actionCode: {}\", this.actionCode);\r\n        LOG.debug(\"this.entityParameter: {}\", entityParameter);\r\n        LOG.debug(\"uuid: {}\", uuid);\r\n\r\n        EntityCustomAction action = ecaService.findByCode(this.actionCode);\r\n        if (action == null) {\r\n          throw new BusinessException(\"Action not found: \" + this.actionCode);\r\n        }\r\n        Map<String, Object> context = new HashMap<>();\r\n        context.put(Script.CONTEXT_ACTION, this.actionCode);\r\n        Map<Object, Object> elContext = new HashMap<>(context);\r\n        elContext.put(\"entity\", entity);\r\n\r\n        LOG.debug(\"action: {}\", action);\r\n        LOG.debug(\"context: {}\", context);\r\n        LOG.debug(\"elContext: {}\", elContext);\r\n\r\n        action.getScriptParameters().forEach((key, value) -> {\r\n          try {\r\n            context.put(key, MeveoValueExpressionWrapper\r\n                .evaluateExpression(value, elContext, Object.class));\r\n          } catch (ELException e) {\r\n            LOG.error(\"Failed to evaluate el for custom action\", e);\r\n          }\r\n        });\r\n\r\n        Map<String, Object> scriptResult = scriptInstanceService\r\n            .execute(\r\n                (IEntity) CEIUtils.pojoToCei(entity),\r\n                this.getDefaultRepository(),\r\n                action.getScript().getCode(),\r\n                context);\r\n\r\n        // Display a message accordingly on what is set in result\r\n        if (scriptResult.containsKey(Script.RESULT_GUI_MESSAGE_KEY)) {\r\n          singleResult.put(MESSAGE, (String) scriptResult.get(Script.RESULT_GUI_MESSAGE_KEY));\r\n        } else if (scriptResult.containsKey(Script.RESULT_GUI_MESSAGE)) {\r\n          singleResult.put(MESSAGE, (String) scriptResult.get(Script.RESULT_GUI_MESSAGE));\r\n        } else {\r\n          singleResult.put(MESSAGE, \"Action executed successfully\");\r\n        }\r\n\r\n        if (scriptResult.containsKey(Script.RESULT_GUI_OUTCOME)) {\r\n          singleResult.put(\"value\", (String) scriptResult.get(Script.RESULT_GUI_OUTCOME));\r\n        }\r\n        result.put(entityCode + \":\" + uuid, singleResult);\r\n      } catch (EntityDoesNotExistsException e) {\r\n        LOG.error(\"Failed to execute a script {} on entity {}\", this.actionCode, entityParameter,\r\n            e);\r\n        throw new BusinessException(\r\n            \"Failed to execute custom action: \" + this.actionCode + \" on entity: \"\r\n                + entityParameter,\r\n            e);\r\n      } finally {\r\n        LOG.info(\"Run \" + this.actionCode + \" action done.\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass EntityList {\r\n  private List<EntityParameter> entities;\r\n\r\n  public List<EntityParameter> getEntities() {\r\n    return entities;\r\n  }\r\n\r\n  public void setEntities(List<EntityParameter> entities) {\r\n    this.entities = entities;\r\n  }\r\n}\r\nclass EntityParameter {\r\n  private String code;\r\n  private String uuid;\r\n\r\n  public String getCode() {\r\n    return code;\r\n  }\r\n\r\n  public void setCode(String code) {\r\n    this.code = code;\r\n  }\r\n\r\n  public String getUuid() {\r\n    return uuid;\r\n  }\r\n\r\n  public void setUuid(String uuid) {\r\n    this.uuid = uuid;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return \"EntityParameter [code=\" + code + \", uuid=\" + uuid + \"]\";\r\n  }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}