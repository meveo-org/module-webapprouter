{
  "code" : "org.meveo.script.GenerateWebAppScript",
  "description" : "Generates a web app when a module is installed",
  "inputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  }, {
    "name" : "defaultRepository",
    "type" : "Repository"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\n\nimport static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\nimport static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.StringWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.Set;\nimport java.util.Map.Entry;\nimport java.util.function.UnaryOperator;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport com.fasterxml.jackson.core.type.TypeReference;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.crm.CustomFieldTemplate;\nimport org.meveo.model.crm.custom.CustomFieldTypeEnum;\nimport org.meveo.model.crm.custom.EntityCustomAction;\nimport org.meveo.model.customEntities.CustomEntityInstance;\nimport org.meveo.model.customEntities.CustomEntityTemplate;\nimport org.meveo.model.customEntities.WebApplication;\nimport org.meveo.model.git.GitRepository;\nimport org.meveo.model.module.MeveoModule;\nimport org.meveo.model.module.MeveoModuleItem;\nimport org.meveo.model.persistence.JacksonUtil;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.persistence.CrossStorageService;\nimport org.meveo.security.MeveoUser;\nimport org.meveo.service.admin.impl.MeveoModuleService;\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\nimport org.meveo.service.custom.CustomEntityTemplateService;\nimport org.meveo.service.custom.EntityCustomActionService;\nimport org.meveo.service.git.GitClient;\nimport org.meveo.service.git.GitHelper;\nimport org.meveo.service.git.GitRepositoryService;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GenerateWebAppScript extends Script {\n\tprivate static final String MASTER_BRANCH = \"master\";\n\tprivate static final String MEVEO_BRANCH = \"meveo\";\n\tprivate static final String MV_TEMPLATE_REPO = \"https://github.com/meveo-org/mv-template.git\";\n\tprivate static final String LOG_SEPARATOR =\n\t\t\t\"***********************************************************\";\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\n\tprivate static final String WEB_APP_TEMPLATE = WebApplication.class.getSimpleName();\n\tprivate static final String PARENT = \"Parent\";\n\tprivate static final String PAGE_TEMPLATE = \"Parent.js\";\n\tprivate static final String INDEX_TEMPLATE = \"index.js\";\n\tprivate static final String LOCALHOST = \"http://localhost:8080/\";\n\tprivate static final String KEYCLOAK_URL = \"http://host.docker.internal:8081/auth\";\n\tprivate static final String KEYCLOAK_REALM = \"meveo\";\n\tprivate static final String KEYCLOAK_RESOURCE = \"meveo-web\";\n\tprivate static final String MODULE_CODE = \"MODULE_CODE\";\n\tprivate static final String AFFIX = \"-UI\";\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GenerateWebAppScript.class);\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate String SLASH = File.separator;\n\tprivate String baseUrl = null;\n\tprivate CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\n\tprivate CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\n\tprivate CustomFieldInstanceService cfiService = getCDIBean(CustomFieldInstanceService.class);\n\tprivate CustomFieldTemplateService cftService = getCDIBean(CustomFieldTemplateService.class);\n\tprivate EntityCustomActionService ecaService = getCDIBean(EntityCustomActionService.class);\n\tprivate GitClient gitClient = getCDIBean(GitClient.class);\n\tprivate GitRepositoryService gitRepositoryService = getCDIBean(GitRepositoryService.class);\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n\n\tprivate Repository repository;\n\tprivate String moduleCode;\n\n\tpublic String getModuleCode() {\n\t\treturn this.moduleCode;\n\t}\n\n\tpublic void setModuleCode(String moduleCode) {\n\t\tthis.moduleCode = moduleCode;\n\t}\n\n\tpublic Repository getDefaultRepository() {\n\t\tif (repository == null) {\n\t\t\trepository = repositoryService.findDefaultRepository();\n\t\t}\n\t\treturn repository;\n\t}\n\n\t@Override\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\n\t\tLOG.debug(\"START - GenerateWebAppScript.execute()\");\n\t\tsuper.execute(parameters);\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\n\t\tif (moduleCode == null) {\n\t\t\tthrow new BusinessException(\"moduleCode not set\");\n\t\t}\n\t\tMeveoModule module = meveoModuleService.findByCode(moduleCode);\n\n\t\tMeveoUser user = (MeveoUser) parameters.get(CONTEXT_CURRENT_USER);\n\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\n\t\tString remoteUrl = appConfig.getProperty(\"meveo.git.directory.remote.url\", null);\n\t\tString remoteUsername = appConfig.getProperty(\"meveo.git.directory.remote.username\", null);\n\t\tString remotePassword = appConfig.getProperty(\"meveo.git.directory.remote.password\", null);\n\t\tString appContext = appConfig.getProperty(\"meveo.admin.webContext\", \"\");\n\t\tString serverUrl = appConfig.getProperty(\"meveo.admin.baseUrl\", null);\n\t\tString keycloakUrl = System.getProperty(\"meveo.keycloak.url\");\n\t\tString keycloakRealm = System.getProperty(\"meveo.keycloak.realm\");\n\t\tString keycloakResource = System.getProperty(\"meveo.keycloak.client\");\n\n\t\tthis.baseUrl = serverUrl;\n\t\tif (this.baseUrl == null) {\n\t\t\tthis.baseUrl = LOCALHOST;\n\t\t}\n\n\t\tthis.baseUrl = this.baseUrl.strip().endsWith(\"/\") ? this.baseUrl : this.baseUrl + \"/\";\n\t\tthis.baseUrl = this.baseUrl + appContext;\n\n\t\tLOG.debug(\"user: {}\", user);\n\t\tLOG.debug(\"baseUrl: {}\", baseUrl);\n\n\t\tif (module != null) {\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\n\t\t\tLOG.debug(\"CUSTOM_TEMPLATE={}\", CUSTOM_TEMPLATE);\n\t\t\tList<String> entityCodes =\n\t\t\t\t\tmoduleItems.stream().filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\n\t\t\t\t\t\t\t.map(entity -> entity.getItemCode()).collect(Collectors.toList());\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\n\n\t\t\tWebApplication webapp = crossStorageApi.find(getDefaultRepository(), WebApplication.class)\n\t\t\t\t\t.by(\"code\", module.getCode()).getResult();\n\n\t\t\t// SAVE WEB APPLICATION CEI\n\t\t\tCustomEntityInstance webApplicationCEI = new CustomEntityInstance();\n\t\t\twebApplicationCEI.setCode(moduleCode);\n\t\t\twebApplicationCEI.setCetCode(WEB_APP_TEMPLATE);\n\t\t\twebApplicationCEI.setDescription(moduleCode + \" Web Application\");\n\t\t\tif (webapp != null) {\n\t\t\t\tLOG.debug(\"UPDATE Web App CEI\");\n\t\t\t\tString uuid = webapp.getUuid();\n\t\t\t\tLOG.debug(\"uuid: {}\", uuid);\n\t\t\t\twebApplicationCEI.setUuid(uuid);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"code\", moduleCode);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"ROOT_PATH\", \"/git/\" + moduleCode + AFFIX);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"BASE_URL\", \"/meveo/rest/webapp/\" + moduleCode);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"entities\", entityCodes);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"label\",\n\t\t\t\t\t\tWebAppScriptHelper.toTitleName(moduleCode));\n\t\t\t\tcrossStorageService.createOrUpdate(getDefaultRepository(), webApplicationCEI);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.error(\"Failed creating cei {}\", e);\n\t\t\t\tthrow new BusinessException(\"Failed creating cei \" + e.getMessage());\n\t\t\t}\n\n\t\t\t// SAVE COPY OF MV-TEMPLATE TO MEVEO GIT REPOSITORY\n\t\t\tGitRepository webappTemplateRepo = gitRepositoryService.findByCode(WEB_APP_TEMPLATE);\n\n\t\t\tif (webappTemplateRepo == null) {\n\t\t\t\tLOG.debug(\"CREATE NEW GitRepository: {}\", WEB_APP_TEMPLATE);\n\t\t\t\twebappTemplateRepo = new GitRepository();\n\t\t\t\twebappTemplateRepo.setCode(WEB_APP_TEMPLATE);\n\t\t\t\twebappTemplateRepo.setDescription(WEB_APP_TEMPLATE + \" Template repository\");\n\t\t\t\twebappTemplateRepo.setRemoteOrigin(MV_TEMPLATE_REPO);\n\t\t\t\twebappTemplateRepo.setDefaultRemoteUsername(\"\");\n\t\t\t\twebappTemplateRepo.setDefaultRemotePassword(\"\");\n\t\t\t\tgitRepositoryService.create(webappTemplateRepo);\n\t\t\t} else {\n\t\t\t\tgitClient.pull(webappTemplateRepo, \"\", \"\");\n\t\t\t}\n\n\t\t\tFile webappTemplateDirectory = GitHelper.getRepositoryDir(user, WEB_APP_TEMPLATE);\n\t\t\tPath webappTemplatePath = webappTemplateDirectory.toPath();\n\t\t\tLOG.debug(\"webappTemplate path: {}\", webappTemplatePath.toString());\n\n\t\t\t// COPY TEMPLATE INTO A SEPARATE MODULE DIRECTORY\n\t\t\tGitRepository moduleWebAppRepo = gitRepositoryService.findByCode(moduleCode + AFFIX);\n\n\t\t\tif (moduleWebAppRepo == null) {\n\t\t\t\tmoduleWebAppRepo = new GitRepository();\n\t\t\t\tmoduleWebAppRepo.setCode(moduleCode + AFFIX);\n\t\t\t\tmoduleWebAppRepo\n\t\t\t\t\t\t.setDescription(WebAppScriptHelper.toTitleName(moduleCode) + \" Template repository\");\n\t\t\t\tmoduleWebAppRepo.setRemoteOrigin(remoteUrl);\n\t\t\t\tmoduleWebAppRepo.setDefaultRemoteUsername(remoteUsername);\n\t\t\t\tmoduleWebAppRepo.setDefaultRemotePassword(remotePassword);\n\t\t\t\tgitRepositoryService.create(moduleWebAppRepo);\n\t\t\t}\n\n\t\t\tgitClient.checkout(moduleWebAppRepo, MEVEO_BRANCH, true);\n\t\t\tString moduleWebAppBranch = gitClient.currentBranch(moduleWebAppRepo);\n\t\t\tLOG.debug(\"moduleWebApp branch: {}\", moduleWebAppBranch);\n\n\t\t\tFile moduleWebAppDirectory = GitHelper.getRepositoryDir(user, moduleCode + AFFIX);\n\t\t\tPath moduleWebAppPath = moduleWebAppDirectory.toPath();\n\n\t\t\tLOG.debug(\"moduleWebApp path: {}\", moduleWebAppPath.toString());\n\n\t\t\ttry (Stream<Path> sourceStream = Files.walk(webappTemplatePath)) {\n\t\t\t\tList<Path> sources = sourceStream.collect(Collectors.toList());\n\t\t\t\tList<Path> destinations =\n\t\t\t\t\t\tsources.stream().map(webappTemplatePath::relativize).map(moduleWebAppPath::resolve)\n\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\t\tList<File> filesToCommit = new ArrayList<>();\n\n\t\t\t\tfor (int index = 0; index < sources.size(); index++) {\n\t\t\t\t\tPath sourcePath = sources.get(index);\n\t\t\t\t\tPath destinationPath = destinations.get(index);\n\t\t\t\t\tFile sourceFile = sourcePath.toFile();\n\t\t\t\t\tFile destinationFile = destinationPath.toFile();\n\t\t\t\t\tboolean isGitConfigFile = sourcePath.toString().contains(SLASH + \".git\" + SLASH);\n\t\t\t\t\tboolean isModelDirectory = sourcePath.toString().contains(SLASH + \"model\" + SLASH);\n\t\t\t\t\tboolean isModelFile =\n\t\t\t\t\t\t\tsourcePath.toString().contains(SLASH + \"model\" + SLASH + \"model.js\");\n\t\t\t\t\tboolean isConfigFile = sourcePath.toString().contains(SLASH + \"config.js\");\n\t\t\t\t\tboolean isKeycloakFile = sourcePath.toString().contains(SLASH + \"keycloak.json\");\n\t\t\t\t\tboolean isParentFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + PARENT);\n\t\t\t\t\tboolean isChildFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + \"Child\");\n\t\t\t\t\tboolean isTopbar = sourcePath.toString()\n\t\t\t\t\t\t\t.contains(SLASH + \"components\" + SLASH + \"layout\" + SLASH + \"TopbarMenu.js\");\n\n\t\t\t\t\t// COPY SPECIFIC FILES ONLY\n\t\t\t\t\tif (!sourceFile.isDirectory()) {\n\t\t\t\t\t\tFileTransformer transformer =\n\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath, entityCodes);\n\t\t\t\t\t\tif (isParentFile) {\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generatePages(transformer));\n\t\t\t\t\t\t} else if (isConfigFile && serverUrl != null) {\n\t\t\t\t\t\t\tMap<String, String> substitutionMap = new HashMap<>();\n\t\t\t\t\t\t\tsubstitutionMap.put(MODULE_CODE, moduleCode);\n\t\t\t\t\t\t\tsubstitutionMap.put(LOCALHOST, serverUrl);\n\t\t\t\t\t\t\tfilesToCommit\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, substitutionMap));\n\t\t\t\t\t\t} else if (isKeycloakFile && serverUrl != null) {\n\t\t\t\t\t\t\tLOG.debug(\"keycloakUrl: {}\", keycloakUrl);\n\t\t\t\t\t\t\tMap<String, String> substitutionMap = new HashMap<>();\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_REALM, keycloakRealm);\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_URL, keycloakUrl);\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_RESOURCE, keycloakResource);\n\t\t\t\t\t\t\tfilesToCommit\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, substitutionMap));\n\t\t\t\t\t\t} else if (isTopbar) {\n\t\t\t\t\t\t\tFileTransformer dashboardTransformer =\n\t\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath,\n\t\t\t\t\t\t\t\t\t\t\tArrays.asList(moduleCode));\n\t\t\t\t\t\t\tList<Substitute> substitutes = new ArrayList<>();\n\t\t\t\t\t\t\tsubstitutes.add(new Substitute(\"Custom Entities\", \"%s\", WebAppScriptHelper.TITLE));\n\t\t\t\t\t\t\tfilesToCommit.addAll(dashboardTransformer.generateFiles(substitutes));\n\t\t\t\t\t\t} else if ((!isGitConfigFile && !isChildFile && !isModelDirectory) || isModelFile) {\n\t\t\t\t\t\t\tFiles.copy(sourcePath, destinationPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\n\t\t\t\t\t\t\tfilesToCommit.add(destinationFile);\n\t\t\t\t\t\t} else if (isModelDirectory) {\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generateModels(transformer));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!isGitConfigFile && !isChildFile && !isParentFile\n\t\t\t\t\t\t\t&& !destinationFile.exists()) {\n\t\t\t\t\t\tFiles.createDirectory(destinationPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!filesToCommit.isEmpty()) {\n\t\t\t\t\tgitClient.commitFiles(moduleWebAppRepo, filesToCommit, \"Initialize Entity GUI template\");\n\t\t\t\t\t// MERGE TO MASTER IF POSSIBLE\n\t\t\t\t\tgitClient.checkout(moduleWebAppRepo, MASTER_BRANCH, true);\n\t\t\t\t\tString moduleWebAppMasterBranch = gitClient.currentBranch(moduleWebAppRepo);\n\t\t\t\t\tLOG.debug(\"switch to moduleWebApp branch: {}\", moduleWebAppMasterBranch);\n\t\t\t\t\tboolean noConflicts = gitClient.merge(moduleWebAppRepo, MEVEO_BRANCH, MASTER_BRANCH);\n\t\t\t\t\tif (noConflicts) {\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t\tLOG.info(\"*************  SUCCESSFULLY MERGED TO MASTER  *************\");\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t\tLOG.info(\"************* MERGE CONFLICTS, MERGE MANUALLY *************\");\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tthrow new BusinessException(ioe);\n\t\t\t}\n\t\t}\n\t\tLOG.debug(\"END - GenerateWebAppScript.execute()\");\n\t}\n\n\tprivate File searchAndReplace(File sourceFile, File destinationFile, String stringToReplace,\n\t\t\tString replacement) throws BusinessException {\n\t\tStringWriter writer = new StringWriter();\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\n\t\tLOG.debug(\"stringToReplace: {}\", stringToReplace);\n\t\tLOG.debug(\"replacement: {}\", replacement);\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\n\t\t\tString fileContent = writer.toString();\n\t\t\tString outputContent = fileContent.replace(stringToReplace, replacement);\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\n\t\t} catch (IOException e) {\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\n\t\t}\n\t\treturn destinationFile;\n\t}\n\n\tprivate File searchAndReplace(File sourceFile, File destinationFile,\n\t\t\tMap<String, String> substitutions) throws BusinessException {\n\t\tStringWriter writer = new StringWriter();\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\n\t\tLOG.debug(\"substitutions: {}\", substitutions);\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\n\t\t\tString outputContent = writer.toString();\n\t\t\tfor (Entry<String, String> entry : substitutions.entrySet()) {\n\t\t\t\tString stringToReplace = entry.getKey();\n\t\t\t\tString replacement = entry.getValue();\n\t\t\t\toutputContent = outputContent.replace(stringToReplace, replacement);\n\t\t\t}\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\n\t\t} catch (IOException e) {\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\n\t\t}\n\t\treturn destinationFile;\n\t}\n\n\tprivate List<File> generatePages(FileTransformer transformer) throws BusinessException {\n\t\tList<File> files = new ArrayList<>();\n\t\tList<Substitute> substitutes = new ArrayList<>();\n\n\t\tString source = transformer.getSource().toString();\n\t\tFile sourceFile = transformer.getSource().toFile();\n\n\t\tStringWriter writer = new StringWriter();\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"Failed loading template:{}, with error: {}\", sourceFile, e.getMessage());\n\t\t\treturn files;\n\t\t}\n\n\t\tif (source.contains(\"ListPage.js\")) {\n\t\t\tLOG.debug(\"GENERATE LIST PAGE\");\n\t\t\tsubstitutes\n\t\t\t\t\t.add(new Substitute(\"ParentEntityListPage\", \"%sListPage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes\n\t\t\t\t\t.add(new Substitute(\"parent-entity-list-page\", \"%s-list-page\", WebAppScriptHelper.TAG));\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"GET\", \"POST\", WebAppScriptHelper.CONSTANT));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\t\t}\n\t\tif (source.contains(\"NewPage.js\")) {\n\t\t\tLOG.debug(\"GENERATE NEW PAGE\");\n\t\t\tsubstitutes\n\t\t\t\t\t.add(new Substitute(\"ParentEntityNewPage\", \"%sNewPage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes\n\t\t\t\t\t.add(new Substitute(\"parent-entity-new-page\", \"%s-new-page\", WebAppScriptHelper.TAG));\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\n\t\t}\n\t\tif (source.contains(\"UpdatePage.js\")) {\n\t\t\tLOG.debug(\"GENERATE UPDATE PAGE\");\n\t\t\tsubstitutes\n\t\t\t\t\t.add(new Substitute(\"ParentEntityUpdatePage\", \"%sUpdatePage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(\n\t\t\t\t\tnew Substitute(\"parent-entity-update-page\", \"%s-update-page\", WebAppScriptHelper.TAG));\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\t\t}\n\t\treturn files;\n\t}\n\n\tprivate Set<String> iterateRefSchemas(String entityCode, Set<String> allSchemas) {\n\t\tSet<String> refSchemaCodes = allSchemas;\n\t\trefSchemaCodes.add(entityCode);\n\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\n\t\tMap<String, CustomFieldTemplate> fields =\n\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\n\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tCustomFieldTemplate field = entry.getValue();\n\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\n\t\t\tboolean isEntity = fieldEntityCode != null;\n\t\t\tboolean isAdded = refSchemaCodes.contains(key);\n\t\t\tboolean isCet = isEntity && !fieldEntityCode.contains(\".\");\n\t\t\tif (!isAdded && isCet) {\n\t\t\t\tLOG.debug(\"Adding to all schemas: {}\", refSchemaCodes);\n\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\n\t\t\t}\n\t\t}\n\t\tLOG.debug(\"Added Schemas: {}\", refSchemaCodes);\n\t\treturn refSchemaCodes;\n\t}\n\n\tprivate List<File> generateModels(FileTransformer transformer) throws BusinessException {\n\t\tList<File> files = new ArrayList<>();\n\t\tLOG.debug(\"GENERATE MODELS\");\n\t\tLOG.debug(\"source path: {}\", transformer.getSource());\n\t\tString source = transformer.getSource().toString();\n\n\t\tif (source.contains(PAGE_TEMPLATE)) {\n\t\t\tLOG.debug(\"GENERATE MODEL FILES\");\n\t\t\tString destination = transformer.getDestination().toString();\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\n\t\t\t\tString entityName = WebAppScriptHelper.toPascalName(entityCode);\n\t\t\t\tString outputFileName = entityName + \".js\";\n\t\t\t\tString destinationName = destination.replace(PAGE_TEMPLATE, outputFileName);\n\t\t\t\tLOG.debug(\"output file name: {}\", destinationName);\n\t\t\t\tStringBuilder modelImports = new StringBuilder();\n\t\t\t\tStringBuilder modelContent = new StringBuilder();\n\t\t\t\tStringBuilder refSchemas = new StringBuilder();\n\t\t\t\tStringBuilder fieldContents = new StringBuilder();\n\t\t\t\tStringBuilder actionContents = new StringBuilder();\n\t\t\t\tStringBuilder ctorContents = new StringBuilder();\n\t\t\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\n\t\t\t\tMap<String, CustomFieldTemplate> fields =\n\t\t\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\n\t\t\t\tMap<String, EntityCustomAction> actions =\n\t\t\t\t\t\tecaService.findByAppliesTo(entityTemplate.getAppliesTo());\n\t\t\t\tSet<String> refSchemaCodes = new HashSet();\n\n\t\t\t\tmodelImports.append(\"import Model from \\\"./model.js\\\";\").append(CRLF);\n\t\t\t\tmodelContent.append(String.format(\"export const code = \\\"%s\\\";\", entityName))\n\t\t\t\t\t\t.append(CRLF);\n\t\t\t\tString label = WebAppScriptHelper.toTitleName(entityCode);\n\t\t\t\tmodelContent.append(String.format(\"export const label = \\\"%s\\\";\", label)).append(CRLF);\n\n\t\t\t\tFormFields formFields = new FormFields();\n\t\t\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\n\t\t\t\t\tCustomFieldTemplate field = entry.getValue();\n\t\t\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\n\t\t\t\t\tformFields.add(field);\n\t\t\t\t\tboolean isEntity = fieldEntityCode != null;\n\t\t\t\t\tif (isEntity && !fieldEntityCode.contains(\".\")) {\n\t\t\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfieldContents.append(formFields);\n\t\t\t\tmodelContent.append(fieldContents);\n\n\t\t\t\tEntityActions entityActions = new EntityActions();\n\t\t\t\tfor (Entry<String, EntityCustomAction> entry : actions.entrySet()) {\n\t\t\t\t\tLOG.debug(\"action: {}\", entry.getKey());\n\t\t\t\t\tentityActions.add(entry.getValue());\n\t\t\t\t}\n\n\t\t\t\tactionContents.append(entityActions);\n\t\t\t\tmodelContent.append(actionContents);\n\n\t\t\t\tString classDefinition = String.format(\"export class ModelClass extends Model {\");\n\t\t\t\tmodelContent.append(classDefinition).append(CRLF);\n\t\t\t\tmodelContent.append(String.format(\"\\tschemaCode = \\\"%s\\\";\", entityName));\n\t\t\t\trefSchemas.append(\"\\trefSchemaCodes = [\");\n\t\t\t\trefSchemas.append(refSchemaCodes.isEmpty() ? \"\" : CRLF);\n\n\t\t\t\tfor (String refSchemaCode : refSchemaCodes) {\n\t\t\t\t\tString refSchema = String.format(\"\\t\\t\\\"%s\\\",\", refSchemaCode);\n\t\t\t\t\trefSchemas.append(refSchema).append(CRLF);\n\t\t\t\t}\n\t\t\t\trefSchemas.append(\"\\t];\").append(CRLF);\n\n\t\t\t\tctorContents.append(\"\\tconstructor(auth){\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t\\tsuper(auth);\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t\\tthis.code = code;\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t\\tthis.label = label;\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t\\tthis.formFields = formFields;\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t\\tthis.actions = actions;\").append(CRLF);\n\t\t\t\tctorContents.append(\"\\t}\").append(CRLF);\n\n\t\t\t\ttry {\n\t\t\t\t\tFile outputFile = new File(destinationName);\n\t\t\t\t\tStringBuilder fullContent =\n\t\t\t\t\t\t\tnew StringBuilder(modelImports).append(CRLF).append(modelContent).append(CRLF)\n\t\t\t\t\t\t\t\t\t.append(refSchemas).append(CRLF).append(ctorContents).append(CRLF).append(\"}\")\n\t\t\t\t\t\t\t\t\t.append(CRLF);\n\t\t\t\t\tFileUtils.write(outputFile, fullContent, StandardCharsets.UTF_8);\n\t\t\t\t\tfiles.add(outputFile);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (source.contains(INDEX_TEMPLATE)) {\n\t\t\tString destination = transformer.getDestination().toString();\n\t\t\tStringBuilder modelIndexImports = new StringBuilder();\n\n\t\t\tList<String> entitiesToExport = new ArrayList<>();\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\n\t\t\t\tString modelImport =\n\t\t\t\t\t\tString.format(\"import * as %s from \\\"./%s.js\\\";\", entityCode, entityCode);\n\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\n\t\t\t\tentitiesToExport.add(String.format(\"%s\", entityCode));\n\t\t\t}\n\t\t\tmodelIndexImports.append(CRLF).append(\"export const MODELS = [ \")\n\t\t\t\t\t.append(String.join(\", \", entitiesToExport))\n\t\t\t\t\t.append(\" ];\").append(CRLF);\n\n\t\t\ttry {\n\t\t\t\tFile outputFile = new File(destination.toString());\n\t\t\t\tFileUtils.write(outputFile, modelIndexImports.toString(), StandardCharsets.UTF_8);\n\t\t\t\tfiles.add(outputFile);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\treturn files;\n\t}\n}\n\n\nclass Substitute {\n\tprivate String regex = null;\n\tprivate String pattern = null;\n\tprivate UnaryOperator<String> format = null;\n\n\tpublic Substitute() {\n\t\tsuper();\n\t}\n\n\tpublic Substitute(String regex, String pattern, UnaryOperator<String> format) {\n\t\tthis.regex = regex;\n\t\tthis.pattern = pattern;\n\t\tthis.format = format;\n\t}\n\n\tpublic String getRegex() {\n\t\treturn regex;\n\t}\n\n\tpublic void setRegex(String regex) {\n\t\tthis.regex = regex;\n\t}\n\n\tpublic String getPattern() {\n\t\treturn pattern;\n\t}\n\n\tpublic void setPattern(String pattern) {\n\t\tthis.pattern = pattern;\n\t}\n\n\tpublic UnaryOperator<String> getFormat() {\n\t\treturn format;\n\t}\n\n\tpublic void setFormat(UnaryOperator<String> format) {\n\t\tthis.format = format;\n\t}\n}\n\n\nclass FileTransformer {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FileTransformer.class);\n\tprivate Path source = null;\n\tprivate Path destination = null;\n\tprivate List<String> entityCodes = new ArrayList<>();\n\n\tpublic FileTransformer() {\n\t\tsuper();\n\t}\n\n\tpublic FileTransformer(Path source, Path destination, List<String> entityCodes) {\n\t\tsuper();\n\t\tthis.source = source;\n\t\tthis.destination = destination;\n\t\tthis.entityCodes = entityCodes;\n\t}\n\n\tpublic Path getSource() {\n\t\treturn this.source;\n\t}\n\n\tpublic void setSource(Path source) {\n\t\tthis.source = source;\n\t}\n\n\tpublic Path getDestination() {\n\t\treturn this.destination;\n\t}\n\n\tpublic void setDestination(Path destination) {\n\t\tthis.destination = destination;\n\t}\n\n\tpublic List<String> getEntityCodes() {\n\t\treturn this.entityCodes;\n\t}\n\n\tpublic void setEntityCodes(List<String> entityCodes) {\n\t\tthis.entityCodes = entityCodes;\n\t}\n\n\tprivate String searchAndReplace(List<Substitute> substitutes, String fileContent,\n\t\t\tString entityCode) {\n\t\tif (!substitutes.isEmpty()) {\n\t\t\tfor (Substitute substitute : substitutes) {\n\t\t\t\tUnaryOperator<String> format = substitute.getFormat();\n\t\t\t\tString replacement = String.format(substitute.getPattern(), format.apply(entityCode));\n\t\t\t\tfileContent = fileContent.replaceAll(substitute.getRegex(), replacement);\n\t\t\t}\n\t\t}\n\t\treturn fileContent;\n\t}\n\n\tpublic List<File> generateFiles(List<Substitute> substitutes) throws BusinessException {\n\t\tStringWriter writer = new StringWriter();\n\t\tList<File> generatedFiles = new ArrayList<>();\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(this.source.toFile())), writer);\n\t\t\tString fileContent = writer.toString();\n\t\t\tfor (String entityCode : this.entityCodes) {\n\t\t\t\tString outputContent = searchAndReplace(substitutes, fileContent, entityCode);\n\t\t\t\tString outputFileName =\n\t\t\t\t\t\tdestination.toString().replace(\"Parent\", WebAppScriptHelper.toPascalName(entityCode));\n\t\t\t\tLOG.debug(\"output file name: {}\", outputFileName);\n\t\t\t\tFile outputFile = new File(outputFileName);\n\t\t\t\tFileUtils.write(outputFile, outputContent, StandardCharsets.UTF_8);\n\t\t\t\tgeneratedFiles.add(outputFile);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new BusinessException(\"Failed loading js template with error: \" + e.getMessage());\n\t\t}\n\t\treturn generatedFiles;\n\t}\n}\n\n\nclass FormFields {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FormFields.class);\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate Set<FieldGroup> groups;\n\n\tpublic FormFields() {\n\t\tthis.groups = new HashSet<>();\n\t}\n\n\tpublic void add(CustomFieldTemplate template) {\n\t\tField field = new Field(template);\n\t\tFieldGroup newGroup = new FieldGroup(field);\n\t\tFieldGroup existingGroup =\n\t\t\t\tthis.groups.stream().filter((group) -> group.equals(newGroup)).findFirst()\n\t\t\t\t\t\t.orElse(newGroup);\n\t\texistingGroup.add(field);\n\t\tthis.groups.add(existingGroup);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tString prefix = \"export const formFields = [\" + CRLF;\n\t\tString suffix = CRLF + \"];\" + CRLF;\n\t\treturn this.groups.stream().sorted().map(FieldGroup::toString)\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\n\t}\n}\n\n\nclass FieldGroup implements Comparable<FieldGroup> {\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate String name;\n\tprivate int index;\n\tprivate List<Field> fields;\n\n\tpublic FieldGroup(Field field) {\n\t\tsuper();\n\t\tMap<String, String> guiPosition = field.getTemplate().getGuiPositionParsed();\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"tab_pos\"));\n\t\t\tthis.name = WebAppScriptHelper.toTitleName(guiPosition.get(\"tab_name\"));\n\t\t} else {\n\t\t\tthis.index = 0;\n\t\t\tthis.name = \"\";\n\t\t}\n\t\tthis.fields = new ArrayList<>();\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\n\tpublic void setIndex(int index) {\n\t\tthis.index = index;\n\t}\n\n\tpublic List<Field> getFields() {\n\t\treturn fields;\n\t}\n\n\tpublic void setFields(List<Field> fields) {\n\t\tthis.fields = fields;\n\t}\n\n\tpublic void add(Field field) {\n\t\tthis.fields.add(field);\n\t}\n\n\t@Override\n\tpublic int compareTo(FieldGroup o) {\n\t\treturn this.getIndex() - o.getIndex();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this)\n\t\t\treturn true;\n\t\tif (!(o instanceof FieldGroup)) {\n\t\t\treturn false;\n\t\t}\n\t\tFieldGroup fieldGroup = (FieldGroup) o;\n\t\treturn Objects.equals(this.getName(), fieldGroup.getName())\n\t\t\t\t&& this.getIndex() == fieldGroup.getIndex();\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.name, this.index);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder content = new StringBuilder(\"\\t{\").append(CRLF).append(\"\\t\\tlabel: \\\"\")\n\t\t\t\t.append(this.name)\n\t\t\t\t.append(\"\\\",\").append(CRLF).append(\"\\t\\tfields: [\").append(CRLF)\n\t\t\t\t.append(\n\t\t\t\t\t\tthis.fields.stream().sorted().map(Field::toString).collect(Collectors.joining(CRLF)))\n\t\t\t\t.append(CRLF)\n\t\t\t\t.append(\"\\t\\t]\").append(CRLF).append(\"\\t},\").append(CRLF);\n\t\treturn content.toString();\n\t}\n}\n\n\nclass Field implements Comparable<Field> {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Field.class);\n\tprivate static String NAME_SEPARATOR = \" - \";\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate int index;\n\tprivate String label;\n\tprivate CustomFieldTemplate template;\n\n\tpublic Field(CustomFieldTemplate template) {\n\t\tthis.template = template;\n\t\tMap<String, String> guiPosition = template.getGuiPositionParsed();\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\n\t\t} else {\n\t\t\tthis.index = 0;\n\t\t}\n\t\tthis.label = WebAppScriptHelper.toTitleName(template.getCode());\n\t}\n\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\n\tpublic void setIndex(int index) {\n\t\tthis.index = index;\n\t}\n\n\tpublic String getLabel() {\n\t\treturn label;\n\t}\n\n\tpublic void setLabel(String label) {\n\t\tthis.label = label;\n\t}\n\n\tpublic CustomFieldTemplate getTemplate() {\n\t\treturn template;\n\t}\n\n\tpublic void setTemplate(CustomFieldTemplate template) {\n\t\tthis.template = template;\n\t}\n\n\t@Override\n\tpublic int compareTo(Field o) {\n\t\treturn this.getIndex() - o.getIndex();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this)\n\t\t\treturn true;\n\t\tif (!(o instanceof Field)) {\n\t\t\treturn false;\n\t\t}\n\t\tField field = (Field) o;\n\t\treturn this.getIndex() == field.getIndex() && Objects.equals(this.getLabel(), field.getLabel());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.index, this.label);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder fieldContents = new StringBuilder();\n\t\tCustomFieldTypeEnum type = template.getFieldType();\n\n\t\tMap<String, Object> fields =\n\t\t\t\tJacksonUtil.convert(template, new TypeReference<Map<String, Object>>() {});\n\n\t\tfields.put(\"label\", WebAppScriptHelper.toTitleName(template.getCode()));\n\n\t\tif (type == CustomFieldTypeEnum.ENTITY || type == CustomFieldTypeEnum.CHILD_ENTITY) {\n\t\t\tString entityClass = template.getEntityClazz() != null ? template.getEntityClazz() : \"\";\n\t\t\tif (entityClass != null) {\n\t\t\t\tLOG.debug(String.format(\"entityClass: \\\"%s\\\"\", entityClass));\n\t\t\t\tif (entityClass.contains(NAME_SEPARATOR)) {\n\t\t\t\t\tString[] entityName = entityClass.split(NAME_SEPARATOR);\n\t\t\t\t\tif (entityName != null) {\n\t\t\t\t\t\tfields.remove(\"entityClazz\");\n\t\t\t\t\t\tif (entityName.length > 1) {\n\t\t\t\t\t\t\tfields.put(\"name\", entityName[1]);\n\t\t\t\t\t\t\tfields.put(\"entitySchema\", entityName[1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfields.put(\"entityClass\", entityClass);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfields.remove(\"displayFormat\");\n\t\tif (type == CustomFieldTypeEnum.DATE) {\n\t\t\tString displayFormat =\n\t\t\t\t\ttemplate.getDisplayFormat() != null ? template.getDisplayFormat() : \"YYYY/MM/dd\";\n\t\t\tfields.put(\"displayFormat\", displayFormat);\n\t\t}\n\n\t\tfieldContents.append(\"\\t\\t\\t\").append(JacksonUtil.toString(fields)).append(\",\");\n\t\treturn fieldContents.toString();\n\t}\n}\n\n\nclass EntityActions {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(EntityActions.class);\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate Set<Action> actions;\n\n\tpublic EntityActions() {\n\t\tthis.actions = new HashSet<>();\n\t}\n\n\tpublic void add(EntityCustomAction customAction) {\n\t\tLOG.debug(\"adding customAction: {}\", customAction);\n\t\tthis.actions.add(new Action(customAction));\n\t\tLOG.debug(\"this.actions: {}\", this.actions);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tLOG.debug(\"actions: {}\", this.actions);\n\t\tString prefix = \"export const actions = [\" + CRLF;\n\t\tString suffix = CRLF + \"];\" + CRLF;\n\t\treturn this.actions.stream().sorted().map(Action::toString)\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\n\t}\n}\n\n\nclass Action implements Comparable<Action> {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Action.class);\n\tprivate int index;\n\tprivate String label;\n\tprivate EntityCustomAction customAction;\n\n\tpublic Action(EntityCustomAction customAction) {\n\t\tthis.customAction = customAction;\n\t\tMap<String, String> guiPosition = customAction.getGuiPositionParsed();\n\t\tLOG.debug(\"guiPosition: {}\", customAction.getGuiPosition());\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\n\t\t} else {\n\t\t\tthis.index = 0;\n\t\t}\n\t}\n\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\n\tpublic void setIndex(int index) {\n\t\tthis.index = index;\n\t}\n\n\tpublic String getLabel() {\n\t\treturn label;\n\t}\n\n\tpublic void setLabel(String label) {\n\t\tthis.label = label;\n\t}\n\n\tpublic EntityCustomAction getCustomAction() {\n\t\treturn customAction;\n\t}\n\n\tpublic void setCustomAction(EntityCustomAction customAction) {\n\t\tthis.customAction = customAction;\n\t}\n\n\t@Override\n\tpublic int compareTo(Action o) {\n\t\treturn this.getIndex() - o.getIndex();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this)\n\t\t\treturn true;\n\t\tif (!(o instanceof Action)) {\n\t\t\treturn false;\n\t\t}\n\t\tAction action = (Action) o;\n\t\treturn Objects.equals(this.getCustomAction().getCode(), action.getCustomAction().getCode())\n\t\t\t\t&& this.getIndex() == action.getIndex()\n\t\t\t\t&& Objects.equals(this.getLabel(), action.getLabel());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.index, this.label);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder actionDetails = new StringBuilder();\n\t\tMap<String, Object> action = new HashMap<>();\n\t\taction.put(\"code\", customAction.getCode());\n\t\taction.put(\"applicableOnEl\", customAction.getApplicableOnEl());\n\t\taction.put(\"applicableToEntityInstance\", customAction.getApplicableToEntityInstance());\n\t\taction.put(\"applicableToEntityList\", customAction.getApplicableToEntityList());\n\t\taction.put(\"appliesTo\", customAction.getAppliesTo());\n\t\taction.put(\"guiPosition\", customAction.getGuiPosition());\n\t\taction.put(\"guiPositionParsed\", customAction.getGuiPositionParsed());\n\t\taction.put(\"label\", customAction.getLabel());\n\t\taction.put(\"labelI18nNullSafe\", customAction.getLabelI18nNullSafe());\n\t\taction.put(\"script\", customAction.getScript().getCode());\n\t\taction.put(\"scriptParameters\", customAction.getScriptParameters());\n\t\tactionDetails.append(\"\\t\").append(JacksonUtil.toString(action)).append(\",\");\n\t\treturn actionDetails.toString();\n\t}\n}\n\n\nclass WebAppScriptHelper {\n\tprivate static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\n\tprivate static final String EMPTY = \"\";\n\tprivate static final String SPACE = \" \";\n\tprivate static final String DASH = \"-\";\n\tprivate static final String UNDERSCORE = \"_\";\n\tprivate static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\n\t\t\t: Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\n\tprivate static final UnaryOperator<String> UPPER_CASE =\n\t\t\tword -> word.isEmpty() ? word : word.toUpperCase();\n\tprivate static final UnaryOperator<String> LOWER_CASE =\n\t\t\tword -> word.isEmpty() ? word : word.toLowerCase();\n\n\tpublic static final String CRLF = \"\\r\\n\";\n\n\tprivate static final String convert(String input, UnaryOperator<String> mapper,\n\t\t\tString joinCharacter) {\n\t\tif (input == null || input.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tPattern pattern = Pattern.compile(WORD_REGEX);\n\t\tMatcher matcher = pattern.matcher(input);\n\t\tString text = matcher.replaceAll(SPACE);\n\t\tString[] words = text.split(SPACE);\n\t\treturn Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\n\t}\n\n\tstatic final String toTitleName(String input) {\n\t\treturn convert(input, TITLE_CASE, SPACE);\n\t}\n\n\tstatic final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\n\n\tstatic final String toConstantName(String input) {\n\t\treturn convert(input, UPPER_CASE, UNDERSCORE);\n\t}\n\n\tstatic final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\n\n\tstatic final String toVariableName(String input) {\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\n\t\treturn Character.toLowerCase(name.charAt(0)) + name.substring(1);\n\t}\n\n\tstatic final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\n\n\tstatic final String toPascalName(String input) {\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\n\t\treturn Character.toUpperCase(name.charAt(0)) + name.substring(1);\n\t}\n\n\tstatic final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\n\n\tstatic final String toTagName(String input) {\n\t\treturn convert(input, LOWER_CASE, DASH);\n\t}\n\n\tstatic final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}