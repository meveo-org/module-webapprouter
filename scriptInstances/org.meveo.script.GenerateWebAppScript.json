{
  "code" : "org.meveo.script.GenerateWebAppScript",
  "description" : "Generates a web app when a module is installed",
  "inputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "moduleCode",
    "type" : "String"
  }, {
    "name" : "defaultRepository",
    "type" : "Repository"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.script;\r\n\r\nimport static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\r\nimport static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.StringWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.Set;\r\nimport java.util.Map.Entry;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.model.crm.custom.CustomFieldTypeEnum;\r\nimport org.meveo.model.crm.custom.EntityCustomAction;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.customEntities.WebApplication;\r\nimport org.meveo.model.git.GitRepository;\r\nimport org.meveo.model.module.MeveoModule;\r\nimport org.meveo.model.module.MeveoModuleItem;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.security.MeveoUser;\r\nimport org.meveo.service.admin.impl.MeveoModuleService;\r\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.custom.EntityCustomActionService;\r\nimport org.meveo.service.git.GitClient;\r\nimport org.meveo.service.git.GitHelper;\r\nimport org.meveo.service.git.GitRepositoryService;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class GenerateWebAppScript extends Script {\r\n\tprivate static final String MASTER_BRANCH = \"master\";\r\n\tprivate static final String MEVEO_BRANCH = \"meveo\";\r\n\tprivate static final String MV_TEMPLATE_REPO = \"https://github.com/meveo-org/mv-template.git\";\r\n\tprivate static final String LOG_SEPARATOR =\r\n\t\t\t\"***********************************************************\";\r\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\r\n\tprivate static final String WEB_APP_TEMPLATE = WebApplication.class.getSimpleName();\r\n\tprivate static final String PARENT = \"Parent\";\r\n\tprivate static final String PAGE_TEMPLATE = \"Parent.js\";\r\n\tprivate static final String INDEX_TEMPLATE = \"index.js\";\r\n\tprivate static final String LOCALHOST = \"http://localhost:8080/\";\r\n\tprivate static final String KEYCLOAK_URL = \"http://host.docker.internal:8081/auth\";\r\n\tprivate static final String KEYCLOAK_REALM = \"meveo\";\r\n\tprivate static final String KEYCLOAK_RESOURCE = \"meveo-web\";\r\n\tprivate static final String AFFIX = \"-UI\";\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GenerateWebAppScript.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate String SLASH = File.separator;\r\n\tprivate String baseUrl = null;\r\n\tprivate CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n\tprivate CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\r\n\tprivate CustomFieldInstanceService cfiService = getCDIBean(CustomFieldInstanceService.class);\r\n\tprivate CustomFieldTemplateService cftService = getCDIBean(CustomFieldTemplateService.class);\r\n\tprivate EntityCustomActionService ecaService = getCDIBean(EntityCustomActionService.class);\r\n\tprivate GitClient gitClient = getCDIBean(GitClient.class);\r\n\tprivate GitRepositoryService gitRepositoryService = getCDIBean(GitRepositoryService.class);\r\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n\tprivate Repository repository;\r\n\tprivate String moduleCode;\r\n\r\n\tpublic String getModuleCode() {\r\n\t\treturn this.moduleCode;\r\n\t}\r\n\r\n\tpublic void setModuleCode(String moduleCode) {\r\n\t\tthis.moduleCode = moduleCode;\r\n\t}\r\n\r\n\tpublic Repository getDefaultRepository() {\r\n\t\tif (repository == null) {\r\n\t\t\trepository = repositoryService.findDefaultRepository();\r\n\t\t}\r\n\t\treturn repository;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tLOG.debug(\"START - GenerateWebAppScript.execute()\");\r\n\t\tsuper.execute(parameters);\r\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\r\n\t\tif (moduleCode == null) {\r\n\t\t\tthrow new BusinessException(\"moduleCode not set\");\r\n\t\t}\r\n\t\tMeveoModule module = meveoModuleService.findByCode(moduleCode);\r\n\r\n\t\tMeveoUser user = (MeveoUser) parameters.get(CONTEXT_CURRENT_USER);\r\n\r\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\r\n\t\tString remoteUrl = appConfig.getProperty(\"meveo.git.directory.remote.url\", null);\r\n\t\tString remoteUsername = appConfig.getProperty(\"meveo.git.directory.remote.username\", null);\r\n\t\tString remotePassword = appConfig.getProperty(\"meveo.git.directory.remote.password\", null);\r\n\t\tString appContext = appConfig.getProperty(\"meveo.moduleName\", \"\");\r\n\t\tString serverUrl = appConfig.getProperty(\"meveo.admin.baseUrl\", null);\r\n\t\tString keycloakUrl = System.getProperty(\"meveo.keycloak.url\");\r\n\t\tString keycloakRealm = System.getProperty(\"meveo.keycloak.realm\");\r\n\t\tString keycloakResource = System.getProperty(\"meveo.keycloak.client\");\r\n\r\n\t\tthis.baseUrl = serverUrl;\r\n\t\tif (this.baseUrl == null) {\r\n\t\t\tthis.baseUrl = LOCALHOST;\r\n\t\t}\r\n\r\n\t\tthis.baseUrl = this.baseUrl.strip().endsWith(\"/\") ? this.baseUrl : this.baseUrl + \"/\";\r\n\t\tthis.baseUrl = this.baseUrl + appContext;\r\n\r\n\t\tLOG.debug(\"user: {}\", user);\r\n\t\tLOG.debug(\"baseUrl: {}\", baseUrl);\r\n\r\n\t\tif (module != null) {\r\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\r\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\r\n\t\t\tLOG.debug(\"CUSTOM_TEMPLATE={}\", CUSTOM_TEMPLATE);\r\n\t\t\tList<String> entityCodes =\r\n\t\t\t\t\tmoduleItems.stream().filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\r\n\t\t\t\t\t\t\t.map(entity -> entity.getItemCode()).collect(Collectors.toList());\r\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\r\n\r\n\t\t\tWebApplication webapp = crossStorageApi.find(getDefaultRepository(), WebApplication.class)\r\n\t\t\t\t\t.by(\"code\", module.getCode()).getResult();\r\n\r\n\t\t\t// SAVE WEB APPLICATION CEI\r\n\t\t\tCustomEntityInstance webApplicationCEI = new CustomEntityInstance();\r\n\t\t\twebApplicationCEI.setCode(moduleCode);\r\n\t\t\twebApplicationCEI.setCetCode(WEB_APP_TEMPLATE);\r\n\t\t\twebApplicationCEI.setDescription(moduleCode + \" Web Application\");\r\n\t\t\tif (webapp != null) {\r\n\t\t\t\tLOG.debug(\"UPDATE Web App CEI\");\r\n\t\t\t\tString uuid = webapp.getUuid();\r\n\t\t\t\tLOG.debug(\"uuid: {}\", uuid);\r\n\t\t\t\twebApplicationCEI.setUuid(uuid);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"code\", moduleCode);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"ROOT_PATH\", \"/git/\" + moduleCode + AFFIX);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"BASE_URL\", \"/meveo/rest/webapp/\" + moduleCode);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"entities\", entityCodes);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"label\",\r\n\t\t\t\t\t\tWebAppScriptHelper.toTitleName(moduleCode));\r\n\t\t\t\tcrossStorageService.createOrUpdate(getDefaultRepository(), webApplicationCEI);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tLOG.error(\"Failed creating cei {}\", e);\r\n\t\t\t\tthrow new BusinessException(\"Failed creating cei \" + e.getMessage());\r\n\t\t\t}\r\n\r\n\t\t\t// SAVE COPY OF MV-TEMPLATE TO MEVEO GIT REPOSITORY\r\n\t\t\tGitRepository webappTemplateRepo = gitRepositoryService.findByCode(WEB_APP_TEMPLATE);\r\n\r\n\t\t\tif (webappTemplateRepo == null) {\r\n\t\t\t\tLOG.debug(\"CREATE NEW GitRepository: {}\", WEB_APP_TEMPLATE);\r\n\t\t\t\twebappTemplateRepo = new GitRepository();\r\n\t\t\t\twebappTemplateRepo.setCode(WEB_APP_TEMPLATE);\r\n\t\t\t\twebappTemplateRepo.setDescription(WEB_APP_TEMPLATE + \" Template repository\");\r\n\t\t\t\twebappTemplateRepo.setRemoteOrigin(MV_TEMPLATE_REPO);\r\n\t\t\t\twebappTemplateRepo.setDefaultRemoteUsername(\"\");\r\n\t\t\t\twebappTemplateRepo.setDefaultRemotePassword(\"\");\r\n\t\t\t\tgitRepositoryService.create(webappTemplateRepo);\r\n\t\t\t} else {\r\n\t\t\t\tgitClient.pull(webappTemplateRepo, \"\", \"\");\r\n\t\t\t}\r\n\r\n\t\t\tFile webappTemplateDirectory = GitHelper.getRepositoryDir(user, WEB_APP_TEMPLATE);\r\n\t\t\tPath webappTemplatePath = webappTemplateDirectory.toPath();\r\n\t\t\tLOG.debug(\"webappTemplate path: {}\", webappTemplatePath.toString());\r\n\r\n\t\t\t// COPY TEMPLATE INTO A SEPARATE MODULE DIRECTORY\r\n\t\t\tGitRepository moduleWebAppRepo = gitRepositoryService.findByCode(moduleCode + AFFIX);\r\n\r\n\t\t\tif (moduleWebAppRepo == null) {\r\n\t\t\t\tmoduleWebAppRepo = new GitRepository();\r\n\t\t\t\tmoduleWebAppRepo.setCode(moduleCode + AFFIX);\r\n\t\t\t\tmoduleWebAppRepo\r\n\t\t\t\t\t\t.setDescription(WebAppScriptHelper.toTitleName(moduleCode) + \" Template repository\");\r\n\t\t\t\tmoduleWebAppRepo.setRemoteOrigin(remoteUrl);\r\n\t\t\t\tmoduleWebAppRepo.setDefaultRemoteUsername(remoteUsername);\r\n\t\t\t\tmoduleWebAppRepo.setDefaultRemotePassword(remotePassword);\r\n\t\t\t\tgitRepositoryService.create(moduleWebAppRepo);\r\n\t\t\t}\r\n\r\n\t\t\tgitClient.checkout(moduleWebAppRepo, MEVEO_BRANCH, true);\r\n\t\t\tString moduleWebAppBranch = gitClient.currentBranch(moduleWebAppRepo);\r\n\t\t\tLOG.debug(\"moduleWebApp branch: {}\", moduleWebAppBranch);\r\n\r\n\t\t\tFile moduleWebAppDirectory = GitHelper.getRepositoryDir(user, moduleCode + AFFIX);\r\n\t\t\tPath moduleWebAppPath = moduleWebAppDirectory.toPath();\r\n\r\n\t\t\tLOG.debug(\"moduleWebApp path: {}\", moduleWebAppPath.toString());\r\n\r\n\t\t\ttry (Stream<Path> sourceStream = Files.walk(webappTemplatePath)) {\r\n\t\t\t\tList<Path> sources = sourceStream.collect(Collectors.toList());\r\n\t\t\t\tList<Path> destinations =\r\n\t\t\t\t\t\tsources.stream().map(webappTemplatePath::relativize).map(moduleWebAppPath::resolve)\r\n\t\t\t\t\t\t\t\t.collect(Collectors.toList());\r\n\r\n\t\t\t\tList<File> filesToCommit = new ArrayList<>();\r\n\r\n\t\t\t\tfor (int index = 0; index < sources.size(); index++) {\r\n\t\t\t\t\tPath sourcePath = sources.get(index);\r\n\t\t\t\t\tPath destinationPath = destinations.get(index);\r\n\t\t\t\t\tFile sourceFile = sourcePath.toFile();\r\n\t\t\t\t\tFile destinationFile = destinationPath.toFile();\r\n\t\t\t\t\tboolean isGitConfigFile = sourcePath.toString().contains(SLASH + \".git\" + SLASH);\r\n\t\t\t\t\tboolean isModelDirectory = sourcePath.toString().contains(SLASH + \"model\" + SLASH);\r\n\t\t\t\t\tboolean isModelFile =\r\n\t\t\t\t\t\t\tsourcePath.toString().contains(SLASH + \"model\" + SLASH + \"model.js\");\r\n\t\t\t\t\tboolean isConfigFile = sourcePath.toString().contains(SLASH + \"config.js\");\r\n\t\t\t\t\tboolean isKeycloakFile = sourcePath.toString().contains(SLASH + \"keycloak.json\");\r\n\t\t\t\t\tboolean isParentFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + PARENT);\r\n\t\t\t\t\tboolean isChildFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + \"Child\");\r\n\t\t\t\t\tboolean isTopbar = sourcePath.toString()\r\n\t\t\t\t\t\t\t.contains(SLASH + \"components\" + SLASH + \"layout\" + SLASH + \"TopbarMenu.js\");\r\n\r\n\t\t\t\t\t// COPY SPECIFIC FILES ONLY\r\n\t\t\t\t\tif (!sourceFile.isDirectory()) {\r\n\t\t\t\t\t\tFileTransformer transformer =\r\n\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath, entityCodes);\r\n\t\t\t\t\t\tif (isParentFile) {\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generatePages(transformer));\r\n\t\t\t\t\t\t} else if (isConfigFile && serverUrl != null) {\r\n\t\t\t\t\t\t\tfilesToCommit\r\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, LOCALHOST, serverUrl));\r\n\t\t\t\t\t\t} else if (isKeycloakFile && serverUrl != null) {\r\n\t\t\t\t\t\t\tLOG.debug(\"keycloakUrl: {}\", keycloakUrl);\r\n\t\t\t\t\t\t\tMap<String, String> substitutionMap = new HashMap<>();\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_REALM, keycloakRealm);\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_URL, keycloakUrl);\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_RESOURCE, keycloakResource);\r\n\t\t\t\t\t\t\tfilesToCommit\r\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, substitutionMap));\r\n\t\t\t\t\t\t} else if (isTopbar) {\r\n\t\t\t\t\t\t\tFileTransformer dashboardTransformer =\r\n\t\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath,\r\n\t\t\t\t\t\t\t\t\t\t\tArrays.asList(moduleCode));\r\n\t\t\t\t\t\t\tList<Substitute> substitutes = new ArrayList<>();\r\n\t\t\t\t\t\t\tsubstitutes.add(new Substitute(\"Custom Entities\", \"%s\", WebAppScriptHelper.TITLE));\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(dashboardTransformer.generateFiles(substitutes));\r\n\t\t\t\t\t\t} else if ((!isGitConfigFile && !isChildFile && !isModelDirectory) || isModelFile) {\r\n\t\t\t\t\t\t\tFiles.copy(sourcePath, destinationPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\r\n\t\t\t\t\t\t\tfilesToCommit.add(destinationFile);\r\n\t\t\t\t\t\t} else if (isModelDirectory) {\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generateModels(transformer));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (!isGitConfigFile && !isChildFile && !isParentFile\r\n\t\t\t\t\t\t\t&& !destinationFile.exists()) {\r\n\t\t\t\t\t\tFiles.createDirectory(destinationPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!filesToCommit.isEmpty()) {\r\n\t\t\t\t\tgitClient.commitFiles(moduleWebAppRepo, filesToCommit, \"Initialize Entity GUI template\");\r\n\t\t\t\t\t// MERGE TO MASTER IF POSSIBLE\r\n\t\t\t\t\tgitClient.checkout(moduleWebAppRepo, MASTER_BRANCH, true);\r\n\t\t\t\t\tString moduleWebAppMasterBranch = gitClient.currentBranch(moduleWebAppRepo);\r\n\t\t\t\t\tLOG.debug(\"switch to moduleWebApp branch: {}\", moduleWebAppMasterBranch);\r\n\t\t\t\t\tboolean noConflicts = gitClient.merge(moduleWebAppRepo, MEVEO_BRANCH, MASTER_BRANCH);\r\n\t\t\t\t\tif (noConflicts) {\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t\tLOG.info(\"*************  SUCCESSFULLY MERGED TO MASTER  *************\");\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t\tLOG.info(\"************* MERGE CONFLICTS, MERGE MANUALLY *************\");\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch (IOException ioe) {\r\n\t\t\t\tthrow new BusinessException(ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\tLOG.debug(\"END - GenerateWebAppScript.execute()\");\r\n\t}\r\n\r\n\tprivate File searchAndReplace(File sourceFile, File destinationFile, String stringToReplace,\r\n\t\t\tString replacement) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\r\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\r\n\t\tLOG.debug(\"stringToReplace: {}\", stringToReplace);\r\n\t\tLOG.debug(\"replacement: {}\", replacement);\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t\tString fileContent = writer.toString();\r\n\t\t\tString outputContent = fileContent.replace(stringToReplace, replacement);\r\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn destinationFile;\r\n\t}\r\n\r\n\tprivate File searchAndReplace(File sourceFile, File destinationFile,\r\n\t\t\tMap<String, String> substitutions) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\r\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\r\n\t\tLOG.debug(\"substitutions: {}\", substitutions);\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t\tString outputContent = writer.toString();\r\n\t\t\tfor (Entry<String, String> entry : substitutions.entrySet()) {\r\n\t\t\t\tString stringToReplace = entry.getKey();\r\n\t\t\t\tString replacement = entry.getValue();\r\n\t\t\t\toutputContent = outputContent.replace(stringToReplace, replacement);\r\n\t\t\t}\r\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn destinationFile;\r\n\t}\r\n\r\n\tprivate List<File> generatePages(FileTransformer transformer) throws BusinessException {\r\n\t\tList<File> files = new ArrayList<>();\r\n\t\tList<Substitute> substitutes = new ArrayList<>();\r\n\r\n\t\tString source = transformer.getSource().toString();\r\n\t\tFile sourceFile = transformer.getSource().toFile();\r\n\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t} catch (IOException e) {\r\n\t\t\tLOG.error(\"Failed loading template:{}, with error: {}\", sourceFile, e.getMessage());\r\n\t\t\treturn files;\r\n\t\t}\r\n\r\n\t\tif (source.contains(\"ListPage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE LIST PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityListPage\", \"%sListPage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"parent-entity-list-page\", \"%s-list-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes.add(new Substitute(\"GET\", \"POST\", WebAppScriptHelper.CONSTANT));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\t\t}\r\n\t\tif (source.contains(\"NewPage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE NEW PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityNewPage\", \"%sNewPage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"parent-entity-new-page\", \"%s-new-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\r\n\t\t}\r\n\t\tif (source.contains(\"UpdatePage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE UPDATE PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityUpdatePage\", \"%sUpdatePage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes.add(\r\n\t\t\t\t\tnew Substitute(\"parent-entity-update-page\", \"%s-update-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\t\t}\r\n\t\treturn files;\r\n\t}\r\n\r\n\tprivate Set<String> iterateRefSchemas(String entityCode, Set<String> allSchemas) {\r\n\t\tSet<String> refSchemaCodes = allSchemas;\r\n\t\trefSchemaCodes.add(entityCode);\r\n\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n\t\tMap<String, CustomFieldTemplate> fields =\r\n\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\r\n\t\t\tString key = entry.getKey();\r\n\t\t\tCustomFieldTemplate field = entry.getValue();\r\n\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\r\n\t\t\tboolean isEntity = fieldEntityCode != null;\r\n\t\t\tboolean isAdded = refSchemaCodes.contains(key);\r\n\t\t\tboolean isCet = isEntity && !fieldEntityCode.contains(\".\");\r\n\t\t\tif (!isAdded && isCet) {\r\n\t\t\t\tLOG.debug(\"Adding to all schemas: {}\", refSchemaCodes);\r\n\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLOG.debug(\"Added Schemas: {}\", refSchemaCodes);\r\n\t\treturn refSchemaCodes;\r\n\t}\r\n\r\n\tprivate List<File> generateModels(FileTransformer transformer) throws BusinessException {\r\n\t\tList<File> files = new ArrayList<>();\r\n\t\tLOG.debug(\"GENERATE MODELS\");\r\n\t\tLOG.debug(\"source path: {}\", transformer.getSource());\r\n\t\tString source = transformer.getSource().toString();\r\n\r\n\t\tif (source.contains(PAGE_TEMPLATE)) {\r\n\t\t\tLOG.debug(\"GENERATE MODEL FILES\");\r\n\t\t\tString destination = transformer.getDestination().toString();\r\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\r\n\t\t\t\tString entityName = WebAppScriptHelper.toPascalName(entityCode);\r\n\t\t\t\tString outputFileName = entityName + \".js\";\r\n\t\t\t\tString destinationName = destination.replace(PAGE_TEMPLATE, outputFileName);\r\n\t\t\t\tLOG.debug(\"output file name: {}\", destinationName);\r\n\t\t\t\tStringBuilder modelImports = new StringBuilder();\r\n\t\t\t\tStringBuilder modelContent = new StringBuilder();\r\n\t\t\t\tStringBuilder refSchemas = new StringBuilder();\r\n\t\t\t\tStringBuilder fieldContents = new StringBuilder();\r\n\t\t\t\tStringBuilder actionContents = new StringBuilder();\r\n\t\t\t\tStringBuilder ctorContents = new StringBuilder();\r\n\t\t\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n\t\t\t\tMap<String, CustomFieldTemplate> fields =\r\n\t\t\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\t\t\tMap<String, EntityCustomAction> actions =\r\n\t\t\t\t\t\tecaService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\t\t\tSet<String> refSchemaCodes = new HashSet();\r\n\r\n\t\t\t\tmodelImports.append(\"import Model from \\\"./model.js\\\";\").append(CRLF);\r\n\t\t\t\tmodelContent.append(String.format(\"export const code = \\\"%s\\\";\", entityName))\r\n\t\t\t\t\t\t.append(CRLF);\r\n\t\t\t\tString label = WebAppScriptHelper.toTitleName(entityCode);\r\n\t\t\t\tmodelContent.append(String.format(\"export const label = \\\"%s\\\";\", label)).append(CRLF);\r\n\r\n\t\t\t\tFormFields formFields = new FormFields();\r\n\t\t\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\r\n\t\t\t\t\tCustomFieldTemplate field = entry.getValue();\r\n\t\t\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\r\n\t\t\t\t\tformFields.add(field);\r\n\t\t\t\t\tboolean isEntity = fieldEntityCode != null;\r\n\t\t\t\t\tif (isEntity && !fieldEntityCode.contains(\".\")) {\r\n\t\t\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfieldContents.append(formFields);\r\n\t\t\t\tmodelContent.append(fieldContents);\r\n\r\n\t\t\t\tEntityActions entityActions = new EntityActions();\r\n\t\t\t\tfor (Entry<String, EntityCustomAction> entry : actions.entrySet()) {\r\n\t\t\t\t\tLOG.debug(\"action: {}\", entry.getKey());\r\n\t\t\t\t\tentityActions.add(entry.getValue());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tactionContents.append(entityActions);\r\n\t\t\t\tmodelContent.append(actionContents);\r\n\r\n\t\t\t\tString classDefinition = String.format(\"export class ModelClass extends Model {\");\r\n\t\t\t\tmodelContent.append(classDefinition).append(CRLF);\r\n\t\t\t\tmodelContent.append(String.format(\"\\tschemaCode = \\\"%s\\\";\", entityName));\r\n\t\t\t\trefSchemas.append(\"\\trefSchemaCodes = [\");\r\n\t\t\t\trefSchemas.append(refSchemaCodes.isEmpty() ? \"\" : CRLF);\r\n\r\n\t\t\t\tfor (String refSchemaCode : refSchemaCodes) {\r\n\t\t\t\t\tString refSchema = String.format(\"\\t\\t\\\"%s\\\",\", refSchemaCode);\r\n\t\t\t\t\trefSchemas.append(refSchema).append(CRLF);\r\n\t\t\t\t}\r\n\t\t\t\trefSchemas.append(\"\\t];\").append(CRLF);\r\n\r\n\t\t\t\tctorContents.append(\"\\tconstructor(auth){\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tsuper(auth);\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.code = code;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.label = label;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.formFields = formFields;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.actions = actions;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t}\").append(CRLF);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFile outputFile = new File(destinationName);\r\n\t\t\t\t\tStringBuilder fullContent =\r\n\t\t\t\t\t\t\tnew StringBuilder(modelImports).append(CRLF).append(modelContent).append(CRLF)\r\n\t\t\t\t\t\t\t\t\t.append(refSchemas).append(CRLF).append(ctorContents).append(CRLF).append(\"}\")\r\n\t\t\t\t\t\t\t\t\t.append(CRLF);\r\n\t\t\t\t\tFileUtils.write(outputFile, fullContent, StandardCharsets.UTF_8);\r\n\t\t\t\t\tfiles.add(outputFile);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (source.contains(INDEX_TEMPLATE)) {\r\n\t\t\tString destination = transformer.getDestination().toString();\r\n\t\t\tStringBuilder modelIndexImports = new StringBuilder();\r\n\r\n\t\t\tList<String> entitiesToExport = new ArrayList<>();\r\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\r\n\t\t\t\tString modelImport =\r\n\t\t\t\t\t\tString.format(\"import * as %s from \\\"./%s.js\\\";\", entityCode, entityCode);\r\n\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\r\n\t\t\t\tentitiesToExport.add(String.format(\"%s\", entityCode));\r\n\t\t\t}\r\n\t\t\tmodelIndexImports.append(CRLF).append(\"export const MODELS = [ \")\r\n\t\t\t\t\t.append(String.join(\", \", entitiesToExport))\r\n\t\t\t\t\t.append(\" ];\").append(CRLF);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tFile outputFile = new File(destination.toString());\r\n\t\t\t\tFileUtils.write(outputFile, modelIndexImports.toString(), StandardCharsets.UTF_8);\r\n\t\t\t\tfiles.add(outputFile);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn files;\r\n\t}\r\n}\r\n\r\n\r\nclass Substitute {\r\n\tprivate String regex = null;\r\n\tprivate String pattern = null;\r\n\tprivate UnaryOperator<String> format = null;\r\n\r\n\tpublic Substitute() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic Substitute(String regex, String pattern, UnaryOperator<String> format) {\r\n\t\tthis.regex = regex;\r\n\t\tthis.pattern = pattern;\r\n\t\tthis.format = format;\r\n\t}\r\n\r\n\tpublic String getRegex() {\r\n\t\treturn regex;\r\n\t}\r\n\r\n\tpublic void setRegex(String regex) {\r\n\t\tthis.regex = regex;\r\n\t}\r\n\r\n\tpublic String getPattern() {\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic void setPattern(String pattern) {\r\n\t\tthis.pattern = pattern;\r\n\t}\r\n\r\n\tpublic UnaryOperator<String> getFormat() {\r\n\t\treturn format;\r\n\t}\r\n\r\n\tpublic void setFormat(UnaryOperator<String> format) {\r\n\t\tthis.format = format;\r\n\t}\r\n}\r\n\r\n\r\nclass FileTransformer {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FileTransformer.class);\r\n\tprivate Path source = null;\r\n\tprivate Path destination = null;\r\n\tprivate List<String> entityCodes = new ArrayList<>();\r\n\r\n\tpublic FileTransformer() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic FileTransformer(Path source, Path destination, List<String> entityCodes) {\r\n\t\tsuper();\r\n\t\tthis.source = source;\r\n\t\tthis.destination = destination;\r\n\t\tthis.entityCodes = entityCodes;\r\n\t}\r\n\r\n\tpublic Path getSource() {\r\n\t\treturn this.source;\r\n\t}\r\n\r\n\tpublic void setSource(Path source) {\r\n\t\tthis.source = source;\r\n\t}\r\n\r\n\tpublic Path getDestination() {\r\n\t\treturn this.destination;\r\n\t}\r\n\r\n\tpublic void setDestination(Path destination) {\r\n\t\tthis.destination = destination;\r\n\t}\r\n\r\n\tpublic List<String> getEntityCodes() {\r\n\t\treturn this.entityCodes;\r\n\t}\r\n\r\n\tpublic void setEntityCodes(List<String> entityCodes) {\r\n\t\tthis.entityCodes = entityCodes;\r\n\t}\r\n\r\n\tprivate String searchAndReplace(List<Substitute> substitutes, String fileContent,\r\n\t\t\tString entityCode) {\r\n\t\tif (!substitutes.isEmpty()) {\r\n\t\t\tfor (Substitute substitute : substitutes) {\r\n\t\t\t\tUnaryOperator<String> format = substitute.getFormat();\r\n\t\t\t\tString replacement = String.format(substitute.getPattern(), format.apply(entityCode));\r\n\t\t\t\tfileContent = fileContent.replaceAll(substitute.getRegex(), replacement);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fileContent;\r\n\t}\r\n\r\n\tpublic List<File> generateFiles(List<Substitute> substitutes) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tList<File> generatedFiles = new ArrayList<>();\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(this.source.toFile())), writer);\r\n\t\t\tString fileContent = writer.toString();\r\n\t\t\tfor (String entityCode : this.entityCodes) {\r\n\t\t\t\tString outputContent = searchAndReplace(substitutes, fileContent, entityCode);\r\n\t\t\t\tString outputFileName =\r\n\t\t\t\t\t\tdestination.toString().replace(\"Parent\", WebAppScriptHelper.toPascalName(entityCode));\r\n\t\t\t\tLOG.debug(\"output file name: {}\", outputFileName);\r\n\t\t\t\tFile outputFile = new File(outputFileName);\r\n\t\t\t\tFileUtils.write(outputFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t\t\tgeneratedFiles.add(outputFile);\r\n\t\t\t}\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed loading js template with error: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn generatedFiles;\r\n\t}\r\n}\r\n\r\n\r\nclass FormFields {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FormFields.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate Set<FieldGroup> groups;\r\n\r\n\tpublic FormFields() {\r\n\t\tthis.groups = new HashSet<>();\r\n\t}\r\n\r\n\tpublic void add(CustomFieldTemplate template) {\r\n\t\tField field = new Field(template);\r\n\t\tFieldGroup newGroup = new FieldGroup(field);\r\n\t\tFieldGroup existingGroup =\r\n\t\t\t\tthis.groups.stream().filter((group) -> group.equals(newGroup)).findFirst()\r\n\t\t\t\t\t\t.orElse(newGroup);\r\n\t\texistingGroup.add(field);\r\n\t\tthis.groups.add(existingGroup);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tString prefix = \"export const formFields = [\" + CRLF;\r\n\t\tString suffix = CRLF + \"];\" + CRLF;\r\n\t\treturn this.groups.stream().sorted().map(FieldGroup::toString)\r\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\r\n\t}\r\n}\r\n\r\n\r\nclass FieldGroup implements Comparable<FieldGroup> {\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate String name;\r\n\tprivate int index;\r\n\tprivate List<Field> fields;\r\n\r\n\tpublic FieldGroup(Field field) {\r\n\t\tsuper();\r\n\t\tMap<String, String> guiPosition = field.getTemplate().getGuiPositionParsed();\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"tab_pos\"));\r\n\t\t\tthis.name = WebAppScriptHelper.toTitleName(guiPosition.get(\"tab_name\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t\tthis.name = \"\";\r\n\t\t}\r\n\t\tthis.fields = new ArrayList<>();\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic List<Field> getFields() {\r\n\t\treturn fields;\r\n\t}\r\n\r\n\tpublic void setFields(List<Field> fields) {\r\n\t\tthis.fields = fields;\r\n\t}\r\n\r\n\tpublic void add(Field field) {\r\n\t\tthis.fields.add(field);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(FieldGroup o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof FieldGroup)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tFieldGroup fieldGroup = (FieldGroup) o;\r\n\t\treturn Objects.equals(this.getName(), fieldGroup.getName())\r\n\t\t\t\t&& this.getIndex() == fieldGroup.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.name, this.index);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder content = new StringBuilder(\"\\t{\").append(CRLF).append(\"\\t\\tlabel: \\\"\")\r\n\t\t\t\t.append(this.name)\r\n\t\t\t\t.append(\"\\\",\").append(CRLF).append(\"\\t\\tfields: [\").append(CRLF)\r\n\t\t\t\t.append(\r\n\t\t\t\t\t\tthis.fields.stream().sorted().map(Field::toString).collect(Collectors.joining(CRLF)))\r\n\t\t\t\t.append(CRLF)\r\n\t\t\t\t.append(\"\\t\\t]\").append(CRLF).append(\"\\t},\").append(CRLF);\r\n\t\treturn content.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass Field implements Comparable<Field> {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Field.class);\r\n\tprivate static String NAME_SEPARATOR = \" - \";\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate int index;\r\n\tprivate String label;\r\n\tprivate CustomFieldTemplate template;\r\n\r\n\tpublic Field(CustomFieldTemplate template) {\r\n\t\tthis.template = template;\r\n\t\tMap<String, String> guiPosition = template.getGuiPositionParsed();\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t}\r\n\t\tthis.label = WebAppScriptHelper.toTitleName(template.getCode());\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic String getLabel() {\r\n\t\treturn label;\r\n\t}\r\n\r\n\tpublic void setLabel(String label) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tpublic CustomFieldTemplate getTemplate() {\r\n\t\treturn template;\r\n\t}\r\n\r\n\tpublic void setTemplate(CustomFieldTemplate template) {\r\n\t\tthis.template = template;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(Field o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof Field)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tField field = (Field) o;\r\n\t\treturn this.getIndex() == field.getIndex() && Objects.equals(this.getLabel(), field.getLabel());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.index, this.label);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder fieldContents = new StringBuilder();\r\n\t\tCustomFieldTypeEnum type = template.getFieldType();\r\n\r\n\t\tMap<String, Object> fields =\r\n\t\t\t\tJacksonUtil.convert(template, new TypeReference<Map<String, Object>>() {});\r\n\r\n\t\tfields.put(\"label\", WebAppScriptHelper.toTitleName(template.getCode()));\r\n\r\n\t\tif (type == CustomFieldTypeEnum.ENTITY || type == CustomFieldTypeEnum.CHILD_ENTITY) {\r\n\t\t\tString entityClass = template.getEntityClazz() != null ? template.getEntityClazz() : \"\";\r\n\t\t\tif (entityClass != null) {\r\n\t\t\t\tLOG.debug(String.format(\"entityClass: \\\"%s\\\"\", entityClass));\r\n\t\t\t\tif (entityClass.contains(NAME_SEPARATOR)) {\r\n\t\t\t\t\tString[] entityName = entityClass.split(NAME_SEPARATOR);\r\n\t\t\t\t\tif (entityName != null) {\r\n\t\t\t\t\t\tfields.remove(\"entityClazz\");\r\n\t\t\t\t\t\tif (entityName.length > 1) {\r\n\t\t\t\t\t\t\tfields.put(\"name\", entityName[1]);\r\n\t\t\t\t\t\t\tfields.put(\"entitySchema\", entityName[1]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfields.put(\"entityClass\", entityClass);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfields.remove(\"displayFormat\");\r\n\t\tif (type == CustomFieldTypeEnum.DATE) {\r\n\t\t\tString displayFormat =\r\n\t\t\t\t\ttemplate.getDisplayFormat() != null ? template.getDisplayFormat() : \"YYYY/MM/dd\";\r\n\t\t\tfields.put(\"displayFormat\", displayFormat);\r\n\t\t}\r\n\r\n\t\tfieldContents.append(\"\\t\\t\\t\").append(JacksonUtil.toString(fields)).append(\",\");\r\n\t\treturn fieldContents.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass EntityActions {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(EntityActions.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate Set<Action> actions;\r\n\r\n\tpublic EntityActions() {\r\n\t\tthis.actions = new HashSet<>();\r\n\t}\r\n\r\n\tpublic void add(EntityCustomAction customAction) {\r\n\t\tLOG.debug(\"adding customAction: {}\", customAction);\r\n\t\tthis.actions.add(new Action(customAction));\r\n\t\tLOG.debug(\"this.actions: {}\", this.actions);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tLOG.debug(\"actions: {}\", this.actions);\r\n\t\tString prefix = \"export const actions = [\" + CRLF;\r\n\t\tString suffix = CRLF + \"];\" + CRLF;\r\n\t\treturn this.actions.stream().sorted().map(Action::toString)\r\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\r\n\t}\r\n}\r\n\r\n\r\nclass Action implements Comparable<Action> {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Action.class);\r\n\tprivate int index;\r\n\tprivate String label;\r\n\tprivate EntityCustomAction customAction;\r\n\r\n\tpublic Action(EntityCustomAction customAction) {\r\n\t\tthis.customAction = customAction;\r\n\t\tMap<String, String> guiPosition = customAction.getGuiPositionParsed();\r\n\t\tLOG.debug(\"guiPosition: {}\", customAction.getGuiPosition());\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic String getLabel() {\r\n\t\treturn label;\r\n\t}\r\n\r\n\tpublic void setLabel(String label) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tpublic EntityCustomAction getCustomAction() {\r\n\t\treturn customAction;\r\n\t}\r\n\r\n\tpublic void setCustomAction(EntityCustomAction customAction) {\r\n\t\tthis.customAction = customAction;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(Action o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof Action)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tAction action = (Action) o;\r\n\t\treturn Objects.equals(this.getCustomAction().getCode(), action.getCustomAction().getCode())\r\n\t\t\t\t&& this.getIndex() == action.getIndex()\r\n\t\t\t\t&& Objects.equals(this.getLabel(), action.getLabel());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.index, this.label);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder actionDetails = new StringBuilder();\r\n\t\tMap<String, Object> action = new HashMap<>();\r\n\t\taction.put(\"code\", customAction.getCode());\r\n\t\taction.put(\"applicableOnEl\", customAction.getApplicableOnEl());\r\n\t\taction.put(\"applicableToEntityInstance\", customAction.getApplicableToEntityInstance());\r\n\t\taction.put(\"applicableToEntityList\", customAction.getApplicableToEntityList());\r\n\t\taction.put(\"appliesTo\", customAction.getAppliesTo());\r\n\t\taction.put(\"guiPosition\", customAction.getGuiPosition());\r\n\t\taction.put(\"guiPositionParsed\", customAction.getGuiPositionParsed());\r\n\t\taction.put(\"label\", customAction.getLabel());\r\n\t\taction.put(\"labelI18nNullSafe\", customAction.getLabelI18nNullSafe());\r\n\t\taction.put(\"script\", customAction.getScript().getCode());\r\n\t\taction.put(\"scriptParameters\", customAction.getScriptParameters());\r\n\t\tactionDetails.append(\"\\t\").append(JacksonUtil.toString(action)).append(\",\");\r\n\t\treturn actionDetails.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass WebAppScriptHelper {\r\n\tprivate static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\r\n\tprivate static final String EMPTY = \"\";\r\n\tprivate static final String SPACE = \" \";\r\n\tprivate static final String DASH = \"-\";\r\n\tprivate static final String UNDERSCORE = \"_\";\r\n\tprivate static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\r\n\t\t\t: Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\r\n\tprivate static final UnaryOperator<String> UPPER_CASE =\r\n\t\t\tword -> word.isEmpty() ? word : word.toUpperCase();\r\n\tprivate static final UnaryOperator<String> LOWER_CASE =\r\n\t\t\tword -> word.isEmpty() ? word : word.toLowerCase();\r\n\r\n\tpublic static final String CRLF = \"\\r\\n\";\r\n\r\n\tprivate static final String convert(String input, UnaryOperator<String> mapper,\r\n\t\t\tString joinCharacter) {\r\n\t\tif (input == null || input.isEmpty()) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tPattern pattern = Pattern.compile(WORD_REGEX);\r\n\t\tMatcher matcher = pattern.matcher(input);\r\n\t\tString text = matcher.replaceAll(SPACE);\r\n\t\tString[] words = text.split(SPACE);\r\n\t\treturn Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\r\n\t}\r\n\r\n\tstatic final String toTitleName(String input) {\r\n\t\treturn convert(input, TITLE_CASE, SPACE);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\r\n\r\n\tstatic final String toConstantName(String input) {\r\n\t\treturn convert(input, UPPER_CASE, UNDERSCORE);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\r\n\r\n\tstatic final String toVariableName(String input) {\r\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\r\n\t\treturn Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\r\n\r\n\tstatic final String toPascalName(String input) {\r\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\r\n\t\treturn Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\r\n\r\n\tstatic final String toTagName(String input) {\r\n\t\treturn convert(input, LOWER_CASE, DASH);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}