[ {
  "active" : true,
  "code" : "WEBAPPROUTER",
  "description" : "Meveo WebApp",
  "license" : "GPL",
  "currentVersion" : "0.9.0",
  "meveoVersionBase" : "6.15.0",
  "transient" : true,
  "codeOnly" : false,
  "inDraft" : true,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.technicalservice.endpoint.EndpointDto",
    "dtoData" : {
      "code" : "webapp",
      "secured" : false,
      "checkPathParams" : false,
      "serviceCode" : "org.manaty.webapp.WebApp",
      "synchronous" : true,
      "method" : "GET",
      "parameterMappings" : [ ],
      "pathParameters" : [ "appCode" ],
      "roles" : [ ],
      "returnedVariableName" : "result",
      "serializeResult" : false,
      "contentType" : "application/json",
      "basePath" : "webapp",
      "path" : "/{appCode}"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "GenerateWebApp",
      "description" : "Generate Web Application based on Module code",
      "appliesTo" : "CE_WebApplication",
      "label" : "Generate Web Application",
      "script" : "org.meveo.script.GenerateWebAppScript",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.GenerateWebAppScript",
      "description" : "Generates a web app when a module is installed",
      "inputs" : [ {
        "name" : "moduleCode",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "moduleCode",
        "type" : "String",
        "description" : null
      }, {
        "name" : "defaultRepository",
        "type" : "Repository",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\r\nimport static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.StringWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.Set;\r\nimport java.util.Map.Entry;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.crm.CustomFieldTemplate;\r\nimport org.meveo.model.crm.custom.CustomFieldTypeEnum;\r\nimport org.meveo.model.crm.custom.EntityCustomAction;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.customEntities.WebApplication;\r\nimport org.meveo.model.git.GitRepository;\r\nimport org.meveo.model.module.MeveoModule;\r\nimport org.meveo.model.module.MeveoModuleItem;\r\nimport org.meveo.model.persistence.JacksonUtil;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.security.MeveoUser;\r\nimport org.meveo.service.admin.impl.MeveoModuleService;\r\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\r\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.custom.EntityCustomActionService;\r\nimport org.meveo.service.git.GitClient;\r\nimport org.meveo.service.git.GitHelper;\r\nimport org.meveo.service.git.GitRepositoryService;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class GenerateWebAppScript extends Script {\r\n\tprivate static final String MASTER_BRANCH = \"master\";\r\n\tprivate static final String MEVEO_BRANCH = \"meveo\";\r\n\tprivate static final String MV_TEMPLATE_REPO = \"https://github.com/meveo-org/mv-template.git\";\r\n\tprivate static final String LOG_SEPARATOR =\r\n\t\t\t\"***********************************************************\";\r\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\r\n\tprivate static final String WEB_APP_TEMPLATE = WebApplication.class.getSimpleName();\r\n\tprivate static final String PARENT = \"Parent\";\r\n\tprivate static final String PAGE_TEMPLATE = \"Parent.js\";\r\n\tprivate static final String INDEX_TEMPLATE = \"index.js\";\r\n\tprivate static final String LOCALHOST = \"http://localhost:8080/\";\r\n\tprivate static final String KEYCLOAK_URL = \"http://host.docker.internal:8081/auth\";\r\n\tprivate static final String KEYCLOAK_REALM = \"meveo\";\r\n\tprivate static final String KEYCLOAK_RESOURCE = \"meveo-web\";\r\n\tprivate static final String AFFIX = \"-UI\";\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GenerateWebAppScript.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate String SLASH = File.separator;\r\n\tprivate String baseUrl = null;\r\n\tprivate CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n\tprivate CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\r\n\tprivate CustomFieldInstanceService cfiService = getCDIBean(CustomFieldInstanceService.class);\r\n\tprivate CustomFieldTemplateService cftService = getCDIBean(CustomFieldTemplateService.class);\r\n\tprivate EntityCustomActionService ecaService = getCDIBean(EntityCustomActionService.class);\r\n\tprivate GitClient gitClient = getCDIBean(GitClient.class);\r\n\tprivate GitRepositoryService gitRepositoryService = getCDIBean(GitRepositoryService.class);\r\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n\tprivate Repository repository;\r\n\tprivate String moduleCode;\r\n\r\n\tpublic String getModuleCode() {\r\n\t\treturn this.moduleCode;\r\n\t}\r\n\r\n\tpublic void setModuleCode(String moduleCode) {\r\n\t\tthis.moduleCode = moduleCode;\r\n\t}\r\n\r\n\tpublic Repository getDefaultRepository() {\r\n\t\tif (repository == null) {\r\n\t\t\trepository = repositoryService.findDefaultRepository();\r\n\t\t}\r\n\t\treturn repository;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tLOG.debug(\"START - GenerateWebAppScript.execute()\");\r\n\t\tsuper.execute(parameters);\r\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\r\n\t\tif (moduleCode == null) {\r\n\t\t\tthrow new BusinessException(\"moduleCode not set\");\r\n\t\t}\r\n\t\tMeveoModule module = meveoModuleService.findByCode(moduleCode);\r\n\r\n\t\tMeveoUser user = (MeveoUser) parameters.get(CONTEXT_CURRENT_USER);\r\n\r\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\r\n\t\tString remoteUrl = appConfig.getProperty(\"meveo.git.directory.remote.url\", null);\r\n\t\tString remoteUsername = appConfig.getProperty(\"meveo.git.directory.remote.username\", null);\r\n\t\tString remotePassword = appConfig.getProperty(\"meveo.git.directory.remote.password\", null);\r\n\t\tString appContext = appConfig.getProperty(\"meveo.moduleName\", \"\");\r\n\t\tString serverUrl = appConfig.getProperty(\"meveo.admin.baseUrl\", null);\r\n\t\tString keycloakUrl = System.getProperty(\"meveo.keycloak.url\");\r\n\t\tString keycloakRealm = System.getProperty(\"meveo.keycloak.realm\");\r\n\t\tString keycloakResource = System.getProperty(\"meveo.keycloak.client\");\r\n\r\n\t\tthis.baseUrl = serverUrl;\r\n\t\tif (this.baseUrl == null) {\r\n\t\t\tthis.baseUrl = LOCALHOST;\r\n\t\t}\r\n\r\n\t\tthis.baseUrl = this.baseUrl + appContext;\r\n\r\n\t\tLOG.debug(\"user: {}\", user);\r\n\t\tLOG.debug(\"baseUrl: {}\", baseUrl);\r\n\r\n\t\tif (module != null) {\r\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\r\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\r\n\t\t\tLOG.debug(\"CUSTOM_TEMPLATE={}\", CUSTOM_TEMPLATE);\r\n\t\t\tList<String> entityCodes =\r\n\t\t\t\t\tmoduleItems.stream().filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\r\n\t\t\t\t\t\t\t.map(entity -> entity.getItemCode()).collect(Collectors.toList());\r\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\r\n\r\n\t\t\tWebApplication webapp = crossStorageApi.find(getDefaultRepository(), WebApplication.class)\r\n\t\t\t\t\t.by(\"code\", module.getCode()).getResult();\r\n\r\n\t\t\t// SAVE WEB APPLICATION CEI\r\n\t\t\tCustomEntityInstance webApplicationCEI = new CustomEntityInstance();\r\n\t\t\twebApplicationCEI.setCode(moduleCode);\r\n\t\t\twebApplicationCEI.setCetCode(WEB_APP_TEMPLATE);\r\n\t\t\twebApplicationCEI.setDescription(moduleCode + \" Web Application\");\r\n\t\t\tif (webapp != null) {\r\n\t\t\t\tLOG.debug(\"UPDATE Web App CEI\");\r\n\t\t\t\tString uuid = webapp.getUuid();\r\n\t\t\t\tLOG.debug(\"uuid: {}\", uuid);\r\n\t\t\t\twebApplicationCEI.setUuid(uuid);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"code\", moduleCode);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"ROOT_PATH\", \"/git/\" + moduleCode + AFFIX);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"BASE_URL\", \"/meveo/rest/webapp/\" + moduleCode);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"entities\", entityCodes);\r\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"label\",\r\n\t\t\t\t\t\tWebAppScriptHelper.toTitleName(moduleCode));\r\n\t\t\t\tcrossStorageService.createOrUpdate(getDefaultRepository(), webApplicationCEI);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tLOG.error(\"Failed creating cei {}\", e);\r\n\t\t\t\tthrow new BusinessException(\"Failed creating cei \" + e.getMessage());\r\n\t\t\t}\r\n\r\n\t\t\t// SAVE COPY OF MV-TEMPLATE TO MEVEO GIT REPOSITORY\r\n\t\t\tGitRepository webappTemplateRepo = gitRepositoryService.findByCode(WEB_APP_TEMPLATE);\r\n\r\n\t\t\tif (webappTemplateRepo == null) {\r\n\t\t\t\tLOG.debug(\"CREATE NEW GitRepository: {}\", WEB_APP_TEMPLATE);\r\n\t\t\t\twebappTemplateRepo = new GitRepository();\r\n\t\t\t\twebappTemplateRepo.setCode(WEB_APP_TEMPLATE);\r\n\t\t\t\twebappTemplateRepo.setDescription(WEB_APP_TEMPLATE + \" Template repository\");\r\n\t\t\t\twebappTemplateRepo.setRemoteOrigin(MV_TEMPLATE_REPO);\r\n\t\t\t\twebappTemplateRepo.setDefaultRemoteUsername(\"\");\r\n\t\t\t\twebappTemplateRepo.setDefaultRemotePassword(\"\");\r\n\t\t\t\tgitRepositoryService.create(webappTemplateRepo);\r\n\t\t\t} else {\r\n\t\t\t\tgitClient.pull(webappTemplateRepo, \"\", \"\");\r\n\t\t\t}\r\n\r\n\t\t\tFile webappTemplateDirectory = GitHelper.getRepositoryDir(user, WEB_APP_TEMPLATE);\r\n\t\t\tPath webappTemplatePath = webappTemplateDirectory.toPath();\r\n\t\t\tLOG.debug(\"webappTemplate path: {}\", webappTemplatePath.toString());\r\n\r\n\t\t\t// COPY TEMPLATE INTO A SEPARATE MODULE DIRECTORY\r\n\t\t\tGitRepository moduleWebAppRepo = gitRepositoryService.findByCode(moduleCode + AFFIX);\r\n\r\n\t\t\tif (moduleWebAppRepo == null) {\r\n\t\t\t\tmoduleWebAppRepo = new GitRepository();\r\n\t\t\t\tmoduleWebAppRepo.setCode(moduleCode + AFFIX);\r\n\t\t\t\tmoduleWebAppRepo\r\n\t\t\t\t\t\t.setDescription(WebAppScriptHelper.toTitleName(moduleCode) + \" Template repository\");\r\n\t\t\t\tmoduleWebAppRepo.setRemoteOrigin(remoteUrl);\r\n\t\t\t\tmoduleWebAppRepo.setDefaultRemoteUsername(remoteUsername);\r\n\t\t\t\tmoduleWebAppRepo.setDefaultRemotePassword(remotePassword);\r\n\t\t\t\tgitRepositoryService.create(moduleWebAppRepo);\r\n\t\t\t}\r\n\r\n\t\t\tgitClient.checkout(moduleWebAppRepo, MEVEO_BRANCH, true);\r\n\t\t\tString moduleWebAppBranch = gitClient.currentBranch(moduleWebAppRepo);\r\n\t\t\tLOG.debug(\"moduleWebApp branch: {}\", moduleWebAppBranch);\r\n\r\n\t\t\tFile moduleWebAppDirectory = GitHelper.getRepositoryDir(user, moduleCode + AFFIX);\r\n\t\t\tPath moduleWebAppPath = moduleWebAppDirectory.toPath();\r\n\r\n\t\t\tLOG.debug(\"moduleWebApp path: {}\", moduleWebAppPath.toString());\r\n\r\n\t\t\ttry (Stream<Path> sourceStream = Files.walk(webappTemplatePath)) {\r\n\t\t\t\tList<Path> sources = sourceStream.collect(Collectors.toList());\r\n\t\t\t\tList<Path> destinations =\r\n\t\t\t\t\t\tsources.stream().map(webappTemplatePath::relativize).map(moduleWebAppPath::resolve)\r\n\t\t\t\t\t\t\t\t.collect(Collectors.toList());\r\n\r\n\t\t\t\tList<File> filesToCommit = new ArrayList<>();\r\n\r\n\t\t\t\tfor (int index = 0; index < sources.size(); index++) {\r\n\t\t\t\t\tPath sourcePath = sources.get(index);\r\n\t\t\t\t\tPath destinationPath = destinations.get(index);\r\n\t\t\t\t\tFile sourceFile = sourcePath.toFile();\r\n\t\t\t\t\tFile destinationFile = destinationPath.toFile();\r\n\t\t\t\t\tboolean isGitConfigFile = sourcePath.toString().contains(SLASH + \".git\" + SLASH);\r\n\t\t\t\t\tboolean isModelDirectory = sourcePath.toString().contains(SLASH + \"model\" + SLASH);\r\n\t\t\t\t\tboolean isModelFile =\r\n\t\t\t\t\t\t\tsourcePath.toString().contains(SLASH + \"model\" + SLASH + \"model.js\");\r\n\t\t\t\t\tboolean isConfigFile = sourcePath.toString().contains(SLASH + \"config.js\");\r\n\t\t\t\t\tboolean isKeycloakFile = sourcePath.toString().contains(SLASH + \"keycloak.json\");\r\n\t\t\t\t\tboolean isParentFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + PARENT);\r\n\t\t\t\t\tboolean isChildFile = sourcePath.toString().contains(SLASH + \"pages\" + SLASH + \"Child\");\r\n\t\t\t\t\tboolean isTopbar = sourcePath.toString()\r\n\t\t\t\t\t\t\t.contains(SLASH + \"components\" + SLASH + \"layout\" + SLASH + \"TopbarMenu.js\");\r\n\r\n\t\t\t\t\t// COPY SPECIFIC FILES ONLY\r\n\t\t\t\t\tif (!sourceFile.isDirectory()) {\r\n\t\t\t\t\t\tFileTransformer transformer =\r\n\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath, entityCodes);\r\n\t\t\t\t\t\tif (isParentFile) {\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generatePages(transformer));\r\n\t\t\t\t\t\t} else if (isConfigFile && serverUrl != null) {\r\n\t\t\t\t\t\t\tfilesToCommit\r\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, LOCALHOST, serverUrl));\r\n\t\t\t\t\t\t} else if (isKeycloakFile && serverUrl != null) {\r\n\t\t\t\t\t\t\tLOG.debug(\"keycloakUrl: {}\", keycloakUrl);\r\n\t\t\t\t\t\t\tMap<String, String> substitutionMap = new HashMap<>();\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_REALM, keycloakRealm);\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_URL, keycloakUrl);\r\n\t\t\t\t\t\t\tsubstitutionMap.put(KEYCLOAK_RESOURCE, keycloakResource);\r\n\t\t\t\t\t\t\tfilesToCommit\r\n\t\t\t\t\t\t\t\t\t.add(this.searchAndReplace(sourceFile, destinationFile, substitutionMap));\r\n\t\t\t\t\t\t} else if (isTopbar) {\r\n\t\t\t\t\t\t\tFileTransformer dashboardTransformer =\r\n\t\t\t\t\t\t\t\t\tnew FileTransformer(sourcePath, destinationPath,\r\n\t\t\t\t\t\t\t\t\t\t\tArrays.asList(moduleCode));\r\n\t\t\t\t\t\t\tList<Substitute> substitutes = new ArrayList<>();\r\n\t\t\t\t\t\t\tsubstitutes.add(new Substitute(\"Custom Entities\", \"%s\", WebAppScriptHelper.TITLE));\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(dashboardTransformer.generateFiles(substitutes));\r\n\t\t\t\t\t\t} else if ((!isGitConfigFile && !isChildFile && !isModelDirectory) || isModelFile) {\r\n\t\t\t\t\t\t\tFiles.copy(sourcePath, destinationPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\r\n\t\t\t\t\t\t\tfilesToCommit.add(destinationFile);\r\n\t\t\t\t\t\t} else if (isModelDirectory) {\r\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generateModels(transformer));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (!isGitConfigFile && !isChildFile && !isParentFile\r\n\t\t\t\t\t\t\t&& !destinationFile.exists()) {\r\n\t\t\t\t\t\tFiles.createDirectory(destinationPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!filesToCommit.isEmpty()) {\r\n\t\t\t\t\tgitClient.commitFiles(moduleWebAppRepo, filesToCommit, \"Initialize Entity GUI template\");\r\n\t\t\t\t\t// MERGE TO MASTER IF POSSIBLE\r\n\t\t\t\t\tgitClient.checkout(moduleWebAppRepo, MASTER_BRANCH, true);\r\n\t\t\t\t\tString moduleWebAppMasterBranch = gitClient.currentBranch(moduleWebAppRepo);\r\n\t\t\t\t\tLOG.debug(\"switch to moduleWebApp branch: {}\", moduleWebAppMasterBranch);\r\n\t\t\t\t\tboolean noConflicts = gitClient.merge(moduleWebAppRepo, MEVEO_BRANCH, MASTER_BRANCH);\r\n\t\t\t\t\tif (noConflicts) {\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t\tLOG.info(\"*************  SUCCESSFULLY MERGED TO MASTER  *************\");\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t\tLOG.info(\"************* MERGE CONFLICTS, MERGE MANUALLY *************\");\r\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch (IOException ioe) {\r\n\t\t\t\tthrow new BusinessException(ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\tLOG.debug(\"END - GenerateWebAppScript.execute()\");\r\n\t}\r\n\r\n\tprivate File searchAndReplace(File sourceFile, File destinationFile, String stringToReplace,\r\n\t\t\tString replacement) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\r\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\r\n\t\tLOG.debug(\"stringToReplace: {}\", stringToReplace);\r\n\t\tLOG.debug(\"replacement: {}\", replacement);\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t\tString fileContent = writer.toString();\r\n\t\t\tString outputContent = fileContent.replace(stringToReplace, replacement);\r\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn destinationFile;\r\n\t}\r\n\r\n\tprivate File searchAndReplace(File sourceFile, File destinationFile,\r\n\t\t\tMap<String, String> substitutions) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tLOG.debug(\"sourceFile: {}\", sourceFile);\r\n\t\tLOG.debug(\"destinationFile: {}\", destinationFile);\r\n\t\tLOG.debug(\"substitutions: {}\", substitutions);\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t\tString outputContent = writer.toString();\r\n\t\t\tfor (Entry<String, String> entry : substitutions.entrySet()) {\r\n\t\t\t\tString stringToReplace = entry.getKey();\r\n\t\t\t\tString replacement = entry.getValue();\r\n\t\t\t\toutputContent = outputContent.replace(stringToReplace, replacement);\r\n\t\t\t}\r\n\t\t\tFileUtils.write(destinationFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed while trying to replace string: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn destinationFile;\r\n\t}\r\n\r\n\tprivate List<File> generatePages(FileTransformer transformer) throws BusinessException {\r\n\t\tList<File> files = new ArrayList<>();\r\n\t\tList<Substitute> substitutes = new ArrayList<>();\r\n\r\n\t\tString source = transformer.getSource().toString();\r\n\t\tFile sourceFile = transformer.getSource().toFile();\r\n\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\r\n\t\t} catch (IOException e) {\r\n\t\t\tLOG.error(\"Failed loading template:{}, with error: {}\", sourceFile, e.getMessage());\r\n\t\t\treturn files;\r\n\t\t}\r\n\r\n\t\tif (source.contains(\"ListPage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE LIST PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityListPage\", \"%sListPage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"parent-entity-list-page\", \"%s-list-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes.add(new Substitute(\"GET\", \"POST\", WebAppScriptHelper.CONSTANT));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\t\t}\r\n\t\tif (source.contains(\"NewPage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE NEW PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityNewPage\", \"%sNewPage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"parent-entity-new-page\", \"%s-new-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\r\n\t\t}\r\n\t\tif (source.contains(\"UpdatePage.js\")) {\r\n\t\t\tLOG.debug(\"GENERATE UPDATE PAGE\");\r\n\t\t\tsubstitutes\r\n\t\t\t\t\t.add(new Substitute(\"ParentEntityUpdatePage\", \"%sUpdatePage\", WebAppScriptHelper.PASCAL));\r\n\t\t\tsubstitutes.add(\r\n\t\t\t\t\tnew Substitute(\"parent-entity-update-page\", \"%s-update-page\", WebAppScriptHelper.TAG));\r\n\t\t\tsubstitutes.add(new Substitute(PARENT, \"%s\", WebAppScriptHelper.PASCAL));\r\n\t\t\tfiles = transformer.generateFiles(substitutes);\r\n\t\t}\r\n\t\treturn files;\r\n\t}\r\n\r\n\tprivate Set<String> iterateRefSchemas(String entityCode, Set<String> allSchemas) {\r\n\t\tSet<String> refSchemaCodes = allSchemas;\r\n\t\trefSchemaCodes.add(entityCode);\r\n\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n\t\tMap<String, CustomFieldTemplate> fields =\r\n\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\r\n\t\t\tString key = entry.getKey();\r\n\t\t\tCustomFieldTemplate field = entry.getValue();\r\n\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\r\n\t\t\tboolean isEntity = fieldEntityCode != null;\r\n\t\t\tboolean isAdded = refSchemaCodes.contains(key);\r\n\t\t\tboolean isCet = isEntity && !fieldEntityCode.contains(\".\");\r\n\t\t\tif (!isAdded && isCet) {\r\n\t\t\t\tLOG.debug(\"Adding to all schemas: {}\", refSchemaCodes);\r\n\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLOG.debug(\"Added Schemas: {}\", refSchemaCodes);\r\n\t\treturn refSchemaCodes;\r\n\t}\r\n\r\n\tprivate List<File> generateModels(FileTransformer transformer) throws BusinessException {\r\n\t\tList<File> files = new ArrayList<>();\r\n\t\tLOG.debug(\"GENERATE MODELS\");\r\n\t\tLOG.debug(\"source path: {}\", transformer.getSource());\r\n\t\tString source = transformer.getSource().toString();\r\n\r\n\t\tif (source.contains(PAGE_TEMPLATE)) {\r\n\t\t\tLOG.debug(\"GENERATE MODEL FILES\");\r\n\t\t\tString destination = transformer.getDestination().toString();\r\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\r\n\t\t\t\tString entityName = WebAppScriptHelper.toPascalName(entityCode);\r\n\t\t\t\tString outputFileName = entityName + \".js\";\r\n\t\t\t\tString destinationName = destination.replace(PAGE_TEMPLATE, outputFileName);\r\n\t\t\t\tLOG.debug(\"output file name: {}\", destinationName);\r\n\t\t\t\tStringBuilder modelImports = new StringBuilder();\r\n\t\t\t\tStringBuilder modelContent = new StringBuilder();\r\n\t\t\t\tStringBuilder refSchemas = new StringBuilder();\r\n\t\t\t\tStringBuilder fieldContents = new StringBuilder();\r\n\t\t\t\tStringBuilder actionContents = new StringBuilder();\r\n\t\t\t\tStringBuilder ctorContents = new StringBuilder();\r\n\t\t\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n\t\t\t\tMap<String, CustomFieldTemplate> fields =\r\n\t\t\t\t\t\tcftService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\t\t\tMap<String, EntityCustomAction> actions =\r\n\t\t\t\t\t\tecaService.findByAppliesTo(entityTemplate.getAppliesTo());\r\n\t\t\t\tSet<String> refSchemaCodes = new HashSet();\r\n\r\n\t\t\t\tmodelImports.append(\"import Model from \\\"./model.js\\\";\").append(CRLF);\r\n\t\t\t\tmodelContent.append(String.format(\"export const code = \\\"%s\\\";\", entityName))\r\n\t\t\t\t\t\t.append(CRLF);\r\n\t\t\t\tString label = WebAppScriptHelper.toTitleName(entityCode);\r\n\t\t\t\tmodelContent.append(String.format(\"export const label = \\\"%s\\\";\", label)).append(CRLF);\r\n\r\n\t\t\t\tFormFields formFields = new FormFields();\r\n\t\t\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\r\n\t\t\t\t\tCustomFieldTemplate field = entry.getValue();\r\n\t\t\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\r\n\t\t\t\t\tformFields.add(field);\r\n\t\t\t\t\tboolean isEntity = fieldEntityCode != null;\r\n\t\t\t\t\tif (isEntity && !fieldEntityCode.contains(\".\")) {\r\n\t\t\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfieldContents.append(formFields);\r\n\t\t\t\tmodelContent.append(fieldContents);\r\n\r\n\t\t\t\tEntityActions entityActions = new EntityActions();\r\n\t\t\t\tfor (Entry<String, EntityCustomAction> entry : actions.entrySet()) {\r\n\t\t\t\t\tentityActions.add(entry.getValue());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tactionContents.append(entityActions);\r\n\t\t\t\tmodelContent.append(actionContents);\r\n\r\n\t\t\t\tString classDefinition = String.format(\"export class ModelClass extends Model {\");\r\n\t\t\t\tmodelContent.append(classDefinition).append(CRLF);\r\n\t\t\t\tmodelContent.append(String.format(\"\\tschemaCode = \\\"%s\\\";\", entityName));\r\n\t\t\t\trefSchemas.append(\"\\trefSchemaCodes = [\");\r\n\t\t\t\trefSchemas.append(refSchemaCodes.isEmpty() ? \"\" : CRLF);\r\n\r\n\t\t\t\tfor (String refSchemaCode : refSchemaCodes) {\r\n\t\t\t\t\tString refSchema = String.format(\"\\t\\t\\\"%s\\\",\", refSchemaCode);\r\n\t\t\t\t\trefSchemas.append(refSchema).append(CRLF);\r\n\t\t\t\t}\r\n\t\t\t\trefSchemas.append(\"\\t];\").append(CRLF);\r\n\r\n\t\t\t\tctorContents.append(\"\\tconstructor(auth){\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tsuper(auth);\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.code = code;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.label = label;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.formFields = formFields;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t\\tthis.actions = actions;\").append(CRLF);\r\n\t\t\t\tctorContents.append(\"\\t}\").append(CRLF);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFile outputFile = new File(destinationName);\r\n\t\t\t\t\tStringBuilder fullContent =\r\n\t\t\t\t\t\t\tnew StringBuilder(modelImports).append(CRLF).append(modelContent).append(CRLF)\r\n\t\t\t\t\t\t\t\t\t.append(refSchemas).append(CRLF).append(ctorContents).append(CRLF).append(\"}\")\r\n\t\t\t\t\t\t\t\t\t.append(CRLF);\r\n\t\t\t\t\tFileUtils.write(outputFile, fullContent, StandardCharsets.UTF_8);\r\n\t\t\t\t\tfiles.add(outputFile);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (source.contains(INDEX_TEMPLATE)) {\r\n\t\t\tString destination = transformer.getDestination().toString();\r\n\t\t\tStringBuilder modelIndexImports = new StringBuilder();\r\n\r\n\t\t\tList<String> entitiesToExport = new ArrayList<>();\r\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\r\n\t\t\t\tString modelImport =\r\n\t\t\t\t\t\tString.format(\"import * as %s from \\\"./%s.js\\\";\", entityCode, entityCode);\r\n\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\r\n\t\t\t\tentitiesToExport.add(String.format(\"%s\", entityCode));\r\n\t\t\t}\r\n\t\t\tmodelIndexImports.append(CRLF).append(\"export const MODELS = [ \")\r\n\t\t\t\t\t.append(String.join(\", \", entitiesToExport))\r\n\t\t\t\t\t.append(\" ];\").append(CRLF);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tFile outputFile = new File(destination.toString());\r\n\t\t\t\tFileUtils.write(outputFile, modelIndexImports.toString(), StandardCharsets.UTF_8);\r\n\t\t\t\tfiles.add(outputFile);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn files;\r\n\t}\r\n}\r\n\r\n\r\nclass Substitute {\r\n\tprivate String regex = null;\r\n\tprivate String pattern = null;\r\n\tprivate UnaryOperator<String> format = null;\r\n\r\n\tpublic Substitute() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic Substitute(String regex, String pattern, UnaryOperator<String> format) {\r\n\t\tthis.regex = regex;\r\n\t\tthis.pattern = pattern;\r\n\t\tthis.format = format;\r\n\t}\r\n\r\n\tpublic String getRegex() {\r\n\t\treturn regex;\r\n\t}\r\n\r\n\tpublic void setRegex(String regex) {\r\n\t\tthis.regex = regex;\r\n\t}\r\n\r\n\tpublic String getPattern() {\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic void setPattern(String pattern) {\r\n\t\tthis.pattern = pattern;\r\n\t}\r\n\r\n\tpublic UnaryOperator<String> getFormat() {\r\n\t\treturn format;\r\n\t}\r\n\r\n\tpublic void setFormat(UnaryOperator<String> format) {\r\n\t\tthis.format = format;\r\n\t}\r\n}\r\n\r\n\r\nclass FileTransformer {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FileTransformer.class);\r\n\tprivate Path source = null;\r\n\tprivate Path destination = null;\r\n\tprivate List<String> entityCodes = new ArrayList<>();\r\n\r\n\tpublic FileTransformer() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic FileTransformer(Path source, Path destination, List<String> entityCodes) {\r\n\t\tsuper();\r\n\t\tthis.source = source;\r\n\t\tthis.destination = destination;\r\n\t\tthis.entityCodes = entityCodes;\r\n\t}\r\n\r\n\tpublic Path getSource() {\r\n\t\treturn this.source;\r\n\t}\r\n\r\n\tpublic void setSource(Path source) {\r\n\t\tthis.source = source;\r\n\t}\r\n\r\n\tpublic Path getDestination() {\r\n\t\treturn this.destination;\r\n\t}\r\n\r\n\tpublic void setDestination(Path destination) {\r\n\t\tthis.destination = destination;\r\n\t}\r\n\r\n\tpublic List<String> getEntityCodes() {\r\n\t\treturn this.entityCodes;\r\n\t}\r\n\r\n\tpublic void setEntityCodes(List<String> entityCodes) {\r\n\t\tthis.entityCodes = entityCodes;\r\n\t}\r\n\r\n\tprivate String searchAndReplace(List<Substitute> substitutes, String fileContent,\r\n\t\t\tString entityCode) {\r\n\t\tif (!substitutes.isEmpty()) {\r\n\t\t\tfor (Substitute substitute : substitutes) {\r\n\t\t\t\tUnaryOperator<String> format = substitute.getFormat();\r\n\t\t\t\tString replacement = String.format(substitute.getPattern(), format.apply(entityCode));\r\n\t\t\t\tfileContent = fileContent.replaceAll(substitute.getRegex(), replacement);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fileContent;\r\n\t}\r\n\r\n\tpublic List<File> generateFiles(List<Substitute> substitutes) throws BusinessException {\r\n\t\tStringWriter writer = new StringWriter();\r\n\t\tList<File> generatedFiles = new ArrayList<>();\r\n\t\ttry {\r\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(this.source.toFile())), writer);\r\n\t\t\tString fileContent = writer.toString();\r\n\t\t\tfor (String entityCode : this.entityCodes) {\r\n\t\t\t\tString outputContent = searchAndReplace(substitutes, fileContent, entityCode);\r\n\t\t\t\tString outputFileName =\r\n\t\t\t\t\t\tdestination.toString().replace(\"Parent\", WebAppScriptHelper.toPascalName(entityCode));\r\n\t\t\t\tLOG.debug(\"output file name: {}\", outputFileName);\r\n\t\t\t\tFile outputFile = new File(outputFileName);\r\n\t\t\t\tFileUtils.write(outputFile, outputContent, StandardCharsets.UTF_8);\r\n\t\t\t\tgeneratedFiles.add(outputFile);\r\n\t\t\t}\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new BusinessException(\"Failed loading js template with error: \" + e.getMessage());\r\n\t\t}\r\n\t\treturn generatedFiles;\r\n\t}\r\n}\r\n\r\n\r\nclass FormFields {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FormFields.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate Set<FieldGroup> groups;\r\n\r\n\tpublic FormFields() {\r\n\t\tthis.groups = new HashSet<>();\r\n\t}\r\n\r\n\tpublic void add(CustomFieldTemplate template) {\r\n\t\tField field = new Field(template);\r\n\t\tFieldGroup newGroup = new FieldGroup(field);\r\n\t\tFieldGroup existingGroup =\r\n\t\t\t\tthis.groups.stream().filter((group) -> group.equals(newGroup)).findFirst()\r\n\t\t\t\t\t\t.orElse(newGroup);\r\n\t\texistingGroup.add(field);\r\n\t\tthis.groups.add(existingGroup);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tString prefix = \"export const formFields = [\" + CRLF;\r\n\t\tString suffix = CRLF + \"];\" + CRLF;\r\n\t\treturn this.groups.stream().sorted().map(FieldGroup::toString)\r\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\r\n\t}\r\n}\r\n\r\n\r\nclass FieldGroup implements Comparable<FieldGroup> {\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate String name;\r\n\tprivate int index;\r\n\tprivate List<Field> fields;\r\n\r\n\tpublic FieldGroup(Field field) {\r\n\t\tsuper();\r\n\t\tMap<String, String> guiPosition = field.getTemplate().getGuiPositionParsed();\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"tab_pos\"));\r\n\t\t\tthis.name = WebAppScriptHelper.toTitleName(guiPosition.get(\"tab_name\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t\tthis.name = \"\";\r\n\t\t}\r\n\t\tthis.fields = new ArrayList<>();\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic List<Field> getFields() {\r\n\t\treturn fields;\r\n\t}\r\n\r\n\tpublic void setFields(List<Field> fields) {\r\n\t\tthis.fields = fields;\r\n\t}\r\n\r\n\tpublic void add(Field field) {\r\n\t\tthis.fields.add(field);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(FieldGroup o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof FieldGroup)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tFieldGroup fieldGroup = (FieldGroup) o;\r\n\t\treturn Objects.equals(this.getName(), fieldGroup.getName())\r\n\t\t\t\t&& this.getIndex() == fieldGroup.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.name, this.index);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder content = new StringBuilder(\"\\t{\").append(CRLF).append(\"\\t\\tlabel: \\\"\")\r\n\t\t\t\t.append(this.name)\r\n\t\t\t\t.append(\"\\\",\").append(CRLF).append(\"\\t\\tfields: [\").append(CRLF)\r\n\t\t\t\t.append(\r\n\t\t\t\t\t\tthis.fields.stream().sorted().map(Field::toString).collect(Collectors.joining(CRLF)))\r\n\t\t\t\t.append(CRLF)\r\n\t\t\t\t.append(\"\\t\\t]\").append(CRLF).append(\"\\t},\").append(CRLF);\r\n\t\treturn content.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass Field implements Comparable<Field> {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Field.class);\r\n\tprivate static String NAME_SEPARATOR = \" - \";\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate int index;\r\n\tprivate String label;\r\n\tprivate CustomFieldTemplate template;\r\n\r\n\tpublic Field(CustomFieldTemplate template) {\r\n\t\tthis.template = template;\r\n\t\tMap<String, String> guiPosition = template.getGuiPositionParsed();\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t}\r\n\t\tthis.label = WebAppScriptHelper.toTitleName(template.getCode());\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic String getLabel() {\r\n\t\treturn label;\r\n\t}\r\n\r\n\tpublic void setLabel(String label) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tpublic CustomFieldTemplate getTemplate() {\r\n\t\treturn template;\r\n\t}\r\n\r\n\tpublic void setTemplate(CustomFieldTemplate template) {\r\n\t\tthis.template = template;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(Field o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof Field)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tField field = (Field) o;\r\n\t\treturn this.getIndex() == field.getIndex() && Objects.equals(this.getLabel(), field.getLabel());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.index, this.label);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder fieldContents = new StringBuilder();\r\n\t\tCustomFieldTypeEnum type = template.getFieldType();\r\n\r\n\t\tMap<String, Object> fields =\r\n\t\t\t\tJacksonUtil.convert(template, new TypeReference<Map<String, Object>>() {});\r\n\r\n\t\tfields.put(\"label\", WebAppScriptHelper.toTitleName(template.getCode()));\r\n\r\n\t\tif (type == CustomFieldTypeEnum.ENTITY || type == CustomFieldTypeEnum.CHILD_ENTITY) {\r\n\t\t\tString entityClass = template.getEntityClazz() != null ? template.getEntityClazz() : \"\";\r\n\t\t\tif (entityClass != null) {\r\n\t\t\t\tLOG.debug(String.format(\"entityClass: \\\"%s\\\"\", entityClass));\r\n\t\t\t\tif (entityClass.contains(NAME_SEPARATOR)) {\r\n\t\t\t\t\tString[] entityName = entityClass.split(NAME_SEPARATOR);\r\n\t\t\t\t\tif (entityName != null) {\r\n\t\t\t\t\t\tfields.remove(\"entityClazz\");\r\n\t\t\t\t\t\tif (entityName.length > 1) {\r\n\t\t\t\t\t\t\tfields.put(\"name\", entityName[1]);\r\n\t\t\t\t\t\t\tfields.put(\"entitySchema\", entityName[1]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfields.put(\"entityClass\", entityClass);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfields.remove(\"displayFormat\");\r\n\t\tif (type == CustomFieldTypeEnum.DATE) {\r\n\t\t\tString displayFormat =\r\n\t\t\t\t\ttemplate.getDisplayFormat() != null ? template.getDisplayFormat() : \"YYYY/MM/dd\";\r\n\t\t\tfields.put(\"displayFormat\", displayFormat);\r\n\t\t}\r\n\r\n\t\tfieldContents.append(\"\\t\\t\\t\").append(JacksonUtil.toString(fields)).append(\",\");\r\n\t\treturn fieldContents.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass EntityActions {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(EntityActions.class);\r\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\r\n\tprivate Set<Action> actions;\r\n\r\n\tpublic EntityActions() {\r\n\t\tthis.actions = new HashSet<>();\r\n\t}\r\n\r\n\tpublic void add(EntityCustomAction customAction) {\r\n\t\tthis.actions.add(new Action(customAction));\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tString prefix = \"export const actions = [\" + CRLF;\r\n\t\tString suffix = CRLF + \"];\" + CRLF;\r\n\t\treturn this.actions.stream().sorted().map(Action::toString)\r\n\t\t\t\t.collect(Collectors.joining(CRLF, prefix, suffix));\r\n\t}\r\n}\r\n\r\n\r\nclass Action implements Comparable<Action> {\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Action.class);\r\n\tprivate int index;\r\n\tprivate String label;\r\n\tprivate EntityCustomAction customAction;\r\n\r\n\tpublic Action(EntityCustomAction customAction) {\r\n\t\tthis.customAction = customAction;\r\n\t\tMap<String, String> guiPosition = customAction.getGuiPositionParsed();\r\n\t\tLOG.debug(\"guiPosition: {}\", customAction.getGuiPosition());\r\n\t\tif (guiPosition != null && guiPosition.size() > 0) {\r\n\t\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\r\n\t\t} else {\r\n\t\t\tthis.index = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic int getIndex() {\r\n\t\treturn index;\r\n\t}\r\n\r\n\tpublic void setIndex(int index) {\r\n\t\tthis.index = index;\r\n\t}\r\n\r\n\tpublic String getLabel() {\r\n\t\treturn label;\r\n\t}\r\n\r\n\tpublic void setLabel(String label) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tpublic EntityCustomAction getCustomAction() {\r\n\t\treturn customAction;\r\n\t}\r\n\r\n\tpublic void setCustomAction(EntityCustomAction customAction) {\r\n\t\tthis.customAction = customAction;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int compareTo(Action o) {\r\n\t\treturn this.getIndex() - o.getIndex();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o == this)\r\n\t\t\treturn true;\r\n\t\tif (!(o instanceof Action)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tAction action = (Action) o;\r\n\t\treturn this.getIndex() == action.getIndex()\r\n\t\t\t\t&& Objects.equals(this.getLabel(), action.getLabel());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn Objects.hash(this.index, this.label);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder actionDetails = new StringBuilder();\r\n\t\tMap<String, Object> action = new HashMap<>();\r\n\t\taction.put(\"code\", customAction.getCode());\r\n\t\taction.put(\"applicableOnEl\", customAction.getApplicableOnEl());\r\n\t\taction.put(\"applicableToEntityInstance\", customAction.getApplicableToEntityInstance());\r\n\t\taction.put(\"applicableToEntityList\", customAction.getApplicableToEntityList());\r\n\t\taction.put(\"appliesTo\", customAction.getAppliesTo());\r\n\t\taction.put(\"guiPosition\", customAction.getGuiPosition());\r\n\t\taction.put(\"guiPositionParsed\", customAction.getGuiPositionParsed());\r\n\t\taction.put(\"label\", customAction.getLabel());\r\n\t\taction.put(\"labelI18nNullSafe\", customAction.getLabelI18nNullSafe());\r\n\t\taction.put(\"script\", customAction.getScript().getCode());\r\n\t\taction.put(\"scriptParameters\", customAction.getScriptParameters());\r\n\t\tactionDetails.append(\"\\t\").append(JacksonUtil.toString(action)).append(\",\");\r\n\t\treturn actionDetails.toString();\r\n\t}\r\n}\r\n\r\n\r\nclass WebAppScriptHelper {\r\n\tprivate static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\r\n\tprivate static final String EMPTY = \"\";\r\n\tprivate static final String SPACE = \" \";\r\n\tprivate static final String DASH = \"-\";\r\n\tprivate static final String UNDERSCORE = \"_\";\r\n\tprivate static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\r\n\t\t\t: Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\r\n\tprivate static final UnaryOperator<String> UPPER_CASE =\r\n\t\t\tword -> word.isEmpty() ? word : word.toUpperCase();\r\n\tprivate static final UnaryOperator<String> LOWER_CASE =\r\n\t\t\tword -> word.isEmpty() ? word : word.toLowerCase();\r\n\r\n\tpublic static final String CRLF = \"\\r\\n\";\r\n\r\n\tprivate static final String convert(String input, UnaryOperator<String> mapper,\r\n\t\t\tString joinCharacter) {\r\n\t\tif (input == null || input.isEmpty()) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tPattern pattern = Pattern.compile(WORD_REGEX);\r\n\t\tMatcher matcher = pattern.matcher(input);\r\n\t\tString text = matcher.replaceAll(SPACE);\r\n\t\tString[] words = text.split(SPACE);\r\n\t\treturn Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\r\n\t}\r\n\r\n\tstatic final String toTitleName(String input) {\r\n\t\treturn convert(input, TITLE_CASE, SPACE);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\r\n\r\n\tstatic final String toConstantName(String input) {\r\n\t\treturn convert(input, UPPER_CASE, UNDERSCORE);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\r\n\r\n\tstatic final String toVariableName(String input) {\r\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\r\n\t\treturn Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\r\n\r\n\tstatic final String toPascalName(String input) {\r\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\r\n\t\treturn Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\r\n\r\n\tstatic final String toTagName(String input) {\r\n\t\treturn convert(input, LOWER_CASE, DASH);\r\n\t}\r\n\r\n\tstatic final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.manaty.webapp.WebApp",
      "description" : "Serve Meveo Web Application",
      "inputs" : [ {
        "name" : "appCode",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "result",
        "type" : "Object",
        "description" : null
      }, {
        "name" : "appCode",
        "type" : "String",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "/*\r\n * (C) Copyright 2018-2019 Manaty SARL (https://manaty.net) and contributors.\r\n *\r\n * This program is free software: you can redistribute it and/or modify it under the terms of the\r\n * GNU Affero General Public License as published by the Free Software Foundation, either version 3\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\r\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. This program is\r\n * not suitable for any direct or indirect application in MILITARY industry See the GNU Affero\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License along with this program.\r\n * If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage org.manaty.webapp;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.rest.technicalservice.impl.EndpointResponse;\r\nimport org.meveo.api.rest.technicalservice.impl.EndpointRequest;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.crm.EntityReferenceWrapper;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.WebApplication;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.custom.CustomEntityInstanceService;\r\nimport org.meveo.service.git.GitHelper;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.io.File;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.util.Arrays;\r\nimport java.util.Map;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WebApp extends Script {\r\n\r\n    private static final int DEFAULT_BUFFER_SIZE = 10240;\r\n    private static final long DEFAULT_EXPIRE_TIME = 604800000L;\r\n    private static final String CRLF = \"\\r\\n\";\r\n    private static final String ENDPOINT_URL = \"/rest/webapp/\";\r\n    private static final String INDEX_FILE = \"index.html\";\r\n    private static final String PNG_TYPE = \"image/png\";\r\n    private static final String AFFIX = \"-UI\";\r\n    private static final String DEFAULT_ICON = \"https://avatars1.githubusercontent.com/u/59589948?s=200&v=4\";\r\n    private static final String INDEX_REPLACE_START = \"<!-- REPLACE TEMPLATE SECTION START -->\";\r\n    private static final String INDEX_REPLACE_END = \"<!-- REPLACE TEMPLATE SECTION END -->\";\r\n    private static final String TITLE_TEMPLATE = \"<title>%s</title>\";\r\n    private static final String FAVICON_TEMPLATE = \"<link rel=\\\"icon\\\" type=\\\"%s\\\" href=\\\"%s\\\" />\";\r\n    private static final String BASEURL_TEMPLATE = \"<base href=\\\"%s\\\" />\";\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(WebApp.class);\r\n\r\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n    private CustomEntityInstanceService ceiService = getCDIBean(CustomEntityInstanceService.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private ParamBean config = paramBeanFactory.getInstance();\r\n    private Repository repository = repositoryService.findDefaultRepository();\r\n\r\n    private EndpointRequest request;\r\n    private String basePath;\r\n    private String webappPath;\r\n    private Object result = \"\";\r\n    private String appCode = \"\";\r\n\r\n    public WebApp() {\r\n        basePath = config.getProperty(\"providers.rootDir\", File.separator + \"meveodata\");\r\n        String rootDirectory = config.getProperty(\"provider.rootDir\", \"default\");\r\n        basePath += File.separator + rootDirectory + File.separator;\r\n        webappPath = basePath + \"webapp\" + File.separator;\r\n        LOG.info(\"basePath: {}\", basePath);\r\n        LOG.info(\"webappPath: {}\", basePath);\r\n        File path = new File(webappPath);\r\n        if (!path.exists()) {\r\n            path.mkdirs();\r\n        }\r\n    }\r\n\r\n    public Object getResult() {\r\n        return result;\r\n    }\r\n\r\n    public String getAppCode() {\r\n        return appCode;\r\n    }\r\n\r\n    public void setAppCode(String appCode) {\r\n        this.appCode = appCode;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> methodContext) {\r\n        this.request = (EndpointRequest) methodContext.get(\"request\");\r\n        EndpointResponse response = (EndpointResponse) methodContext.get(\"response\");\r\n        String remainingPath = request.getRemainingPath();\r\n        LOG.info(\"appCode: \" + this.appCode);\r\n        LOG.info(\"remainingPath: \" + remainingPath);\r\n        String appPath = \"/\" + this.appCode + AFFIX;\r\n        String rootPath = null;\r\n        if (remainingPath.equalsIgnoreCase(appPath)) {\r\n            rootPath = webappPath;\r\n        } else {\r\n            rootPath = webappPath + this.appCode + AFFIX;\r\n        }\r\n        try {\r\n            // we first try to get the file from file explorer under the webapp/appCode/\r\n            // directory\r\n            File file = lookupFile(rootPath, remainingPath);\r\n            if (file == null) {\r\n                LOG.info(\"File not found in webapp, we look in git\");\r\n                File repositoryDir = GitHelper.getRepositoryDir(null, this.appCode + AFFIX);\r\n                rootPath = repositoryDir.getPath().toString();\r\n                file = lookupFile(rootPath, remainingPath);\r\n                // file still doesnt exist, we build it\r\n                if (file == null) {\r\n                    LOG.info(\"File not found in git, we build it\");\r\n                    WebApplication app = crossStorageApi.find(repository, WebApplication.class).by(\"code\", this.appCode)\r\n                            .getResult();\r\n                    CustomEntityInstance instance = crossStorageApi.find(repository, app.getUuid(), app.getCetCode());\r\n                    result = org.manaty.webapp.HtmlApplicationSerializer.getHtml(instance, remainingPath, ceiService);\r\n                    return;\r\n                }\r\n            }\r\n            serveFile(file, request, response);\r\n        } catch (IOException | EntityDoesNotExistsException exception) {\r\n            response.setStatus(400);\r\n            result = \"Encountered error while trying to load \" + remainingPath;\r\n        }\r\n    }\r\n\r\n    private File lookupFile(String rootPath, String remainingPath) throws java.io.IOException {\r\n        // load the file as-is at first\r\n        File file = new File(rootPath, URLDecoder.decode(remainingPath, \"UTF-8\"));\r\n        LOG.info(\"Looking for \" + remainingPath + \" in \" + rootPath);\r\n        // we attempt to load the index.html from the directory first.\r\n        if (!file.exists() || file.isDirectory()) {\r\n            if (file.isDirectory()) {\r\n                int subFolderIndex = remainingPath.indexOf(\"/\", 1);\r\n                String subFolder = subFolderIndex > -1 ? remainingPath.substring(0, subFolderIndex) : remainingPath;\r\n                LOG.info(\"Attempt to load index.html from \" + subFolder);\r\n                file = new File(rootPath, URLDecoder.decode(subFolder + File.separator + INDEX_FILE, \"UTF-8\"));\r\n            }\r\n            // default to rootPath's index.html\r\n            if (!file.exists()) {\r\n                LOG.info(\"Attempt to load index.html from \" + rootPath);\r\n                String baseIndexPath = rootPath + File.separator;\r\n                File indexTemplate = new File(baseIndexPath + INDEX_FILE);\r\n                String repoPath = GitHelper.getRepositoryDir(null, this.appCode + AFFIX).toPath().toString();\r\n                String rootIndex = repoPath + File.separator + INDEX_FILE;\r\n                boolean isAppIndex = indexTemplate.getAbsolutePath().contains(rootIndex);\r\n\r\n                LOG.info(\"indexPath: {}\", indexTemplate.getAbsolutePath());\r\n                LOG.info(\"repoPath: {}\", repoPath);\r\n                LOG.info(\"rootIndex: {}\", rootIndex);\r\n                LOG.info(\"isAppIndex: {}\", isAppIndex);\r\n                if (isAppIndex) {\r\n                    File generatedIndex = new File(baseIndexPath + \"generated_index.html\");\r\n                    if (!generatedIndex.exists()) {\r\n                        String indexContents = new String(Files.readAllBytes(indexTemplate.toPath()));\r\n                        int start = indexContents.indexOf(INDEX_REPLACE_START);\r\n                        int end = indexContents.indexOf(INDEX_REPLACE_END);\r\n                        String topContent = indexContents.substring(0, start);\r\n                        String endContent = indexContents.substring(end + INDEX_REPLACE_END.length());\r\n                        String title = String.format(TITLE_TEMPLATE, WebAppScriptHelper.toTitleName(this.appCode));\r\n                        String iconType = PNG_TYPE;\r\n                        String iconUrl = DEFAULT_ICON;\r\n                        String favIcon = String.format(FAVICON_TEMPLATE, iconType, iconUrl);\r\n                        String contextPath = request.getContextPath() + ENDPOINT_URL + this.appCode + \"/\";\r\n                        String baseUrl = String.format(BASEURL_TEMPLATE, contextPath);\r\n                        String newContent = topContent + CRLF + title + CRLF + favIcon + CRLF + baseUrl + CRLF\r\n                                + endContent;\r\n                        FileUtils.writeStringToFile(generatedIndex, newContent);\r\n                    }\r\n                    file = generatedIndex;\r\n                }\r\n            }\r\n            // if an index.html file does not exist in both rootPath and subdirectory, we\r\n            // return null\r\n            if (!file.exists()) {\r\n                return null;\r\n            }\r\n        }\r\n        LOG.info(\"Lookup returning file: {}\", file.toPath());\r\n        return file;\r\n    }\r\n\r\n    private void serveFile(File file, EndpointRequest request, EndpointResponse response) {\r\n        LOG.info(\"Serving file \" + file.getAbsolutePath());\r\n        // Prepare some variables. The ETag is an unique identifier of the file.\r\n        String fileName = file.getName();\r\n        long length = file.length();\r\n        long lastModified = file.lastModified();\r\n        String eTag = fileName + \"_\" + length + \"_\" + lastModified;\r\n        long expires = System.currentTimeMillis() + DEFAULT_EXPIRE_TIME;\r\n        // Validate request headers for caching\r\n        // ---------------------------------------------------\r\n        // If-None-Match header should contain \"*\" or ETag. If so, then return 304.\r\n        String ifNoneMatch = request.getHeader(\"If-None-Match\");\r\n        if (ifNoneMatch != null && matches(ifNoneMatch, eTag)) {\r\n            response.setStatus(304);\r\n            // Required in 304.\r\n            response.setHeader(\"ETag\", eTag);\r\n            // Postpone cache with 1 week.\r\n            response.setDateHeader(\"Expires\", expires);\r\n            LOG.info(\"If-None-Match\");\r\n            return;\r\n        }\r\n        // If-Modified-Since header should be greater than LastModified. If so, then\r\n        // return 304.\r\n        // This header is ignored if any If-None-Match header is specified.\r\n        long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\");\r\n        if (ifNoneMatch == null && ifModifiedSince != -1 && ifModifiedSince + 1000 > lastModified) {\r\n            response.setStatus(304);\r\n            // Required in 304.\r\n            response.setHeader(\"ETag\", eTag);\r\n            // Postpone cache with 1 week.\r\n            response.setDateHeader(\"Expires\", expires);\r\n            LOG.info(\"If-Modified-Match\");\r\n            return;\r\n        }\r\n        // Validate request headers for resume\r\n        // ----------------------------------------------------\r\n        // If-Match header should contain \"*\" or ETag. If not, then return 412.\r\n        String ifMatch = request.getHeader(\"If-Match\");\r\n        if (ifMatch != null && !matches(ifMatch, eTag)) {\r\n            response.setStatus(412);\r\n            LOG.info(\"If-Match\");\r\n            return;\r\n        }\r\n        // If-Unmodified-Since header should be greater than LastModified. If not, then\r\n        // return 412.\r\n        long ifUnmodifiedSince = request.getDateHeader(\"If-Unmodified-Since\");\r\n        if (ifUnmodifiedSince != -1 && ifUnmodifiedSince + 1000 <= lastModified) {\r\n            response.setStatus(412);\r\n            LOG.info(\"If-Unmodified-Since\");\r\n            return;\r\n        }\r\n        // Prepare and initialize response\r\n        // --------------------------------------------------------\r\n        // Get content type by file name and set default GZIP support and content\r\n        // disposition.\r\n        String contentType = request.getServletContext().getMimeType(fileName);\r\n        LOG.info(\"Servlet context found MIME=\" + contentType);\r\n        boolean acceptsGzip = false;\r\n        String disposition = \"inline\";\r\n        // To add new content types, add new mime-mapping entry in web.xml.\r\n        if (contentType == null) {\r\n            if (fileName.endsWith(\".js\")) {\r\n                contentType = \"application/javascript\";\r\n            }\r\n            contentType = \"application/octet-stream\";\r\n        }\r\n        // the browser and expand content type with the one and right character\r\n        // encoding.\r\n        if (contentType.startsWith(\"text\")) {\r\n            String acceptEncoding = request.getHeader(\"Accept-Encoding\");\r\n            acceptsGzip = acceptEncoding != null && accepts(acceptEncoding, \"gzip\");\r\n            contentType += \";charset=UTF-8\";\r\n        } else // the browser, then set to inline, else attachment which will pop a 'save as'\r\n               // dialogue.\r\n        if (!contentType.startsWith(\"image\")) {\r\n            String accept = request.getHeader(\"Accept\");\r\n            disposition = accept != null && accepts(accept, contentType) ? \"inline\" : \"attachment\";\r\n        }\r\n        LOG.info(\" content-type:\" + contentType);\r\n        // Initialize response.\r\n        response.setBufferSize(DEFAULT_BUFFER_SIZE);\r\n        response.setContentType(contentType);\r\n        response.setHeader(\"Content-Disposition\", disposition + \";filename=\\\"\" + fileName + \"\\\"\");\r\n        response.setHeader(\"Accept-Ranges\", \"bytes\");\r\n        response.setHeader(\"ETag\", eTag);\r\n        response.setDateHeader(\"Last-Modified\", lastModified);\r\n        response.setDateHeader(\"Expires\", expires);\r\n        try {\r\n            response.setOutput(Files.readAllBytes(file.toPath()));\r\n        } catch (IOException ioException) {\r\n            response.setStatus(400);\r\n            response.setErrorMessage(\"Encountered error while trying to load \" + fileName);\r\n        }\r\n    }\r\n\r\n    // Helpers (can be refactored to public utility class)\r\n    // ----------------------------------------\r\n    /**\r\n     * Returns true if the given accept header accepts the given value.\r\n     *\r\n     * @param acceptHeader The accept header.\r\n     * @param toAccept     The value to be accepted.\r\n     * @return True if the given accept header accepts the given value.\r\n     */\r\n    private static boolean accepts(String acceptHeader, String toAccept) {\r\n        String[] acceptValues = acceptHeader.split(\"\\\\s*(,|;)\\\\s*\");\r\n        Arrays.sort(acceptValues);\r\n        return Arrays.binarySearch(acceptValues, toAccept) > -1\r\n                || Arrays.binarySearch(acceptValues, toAccept.replaceAll(\"/.*$\", \"/*\")) > -1\r\n                || Arrays.binarySearch(acceptValues, \"*/*\") > -1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given match header matches the given value.\r\n     *\r\n     * @param matchHeader The match header.\r\n     * @param toMatch     The value to be matched.\r\n     * @return True if the given match header matches the given value.\r\n     */\r\n    private static boolean matches(String matchHeader, String toMatch) {\r\n        String[] matchValues = matchHeader.split(\"\\\\s*,\\\\s*\");\r\n        Arrays.sort(matchValues);\r\n        return Arrays.binarySearch(matchValues, toMatch) > -1 || Arrays.binarySearch(matchValues, \"*\") > -1;\r\n    }\r\n}\r\n\r\nclass HtmlApplicationSerializer {\r\n\r\n    static final String docType = \"<!DOCTYPE html>\";\r\n\r\n    static final String ln = System.lineSeparator();\r\n\r\n    static CustomEntityInstanceService customEntityInstanceService;\r\n\r\n    static String getHtml(CustomEntityInstance app, String remainingPath, CustomEntityInstanceService ceis) {\r\n        customEntityInstanceService = ceis;\r\n        if (app.getCfValues().getCfValue(\"webPages\") == null) {\r\n            return docType + \"<html><body><h1>\" + app.getDescription() + \"</h1></body></html>\";\r\n        }\r\n        Map<String, EntityReferenceWrapper> webpages = (Map<String, EntityReferenceWrapper>) app.getCfValues()\r\n                .getCfValue(\"webPages\").getMapValue();\r\n        EntityReferenceWrapper webpage = null;\r\n        if (webpages != null && webpages.containsKey(remainingPath)) {\r\n            webpage = webpages.get(remainingPath);\r\n        }\r\n        if (webpage == null) {\r\n            return docType + \"<html><body><h1>Page \" + remainingPath + \" not found among \"\r\n                    + app.getCfValues().getValues() + \"</h1></body></html>\";\r\n        }\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(docType).append(ln);\r\n        result.append(\"<html>\").append(ln);\r\n        result.append(\"<head>\").append(ln);\r\n        if (app.getCfValues().getCfValue(\"stylesheets\") != null) {\r\n            Map<String, EntityReferenceWrapper> stylesheets = (Map<String, EntityReferenceWrapper>) app.getCfValues()\r\n                    .getCfValue(\"stylesheets\").getListValue();\r\n            if (stylesheets != null && stylesheets.size() > 0) {\r\n                result.append(getStyleSheets(stylesheets));\r\n            }\r\n        }\r\n        result.append(getWebpageHtml(webpage));\r\n        result.append(\"</html>\").append(ln);\r\n        return result.toString();\r\n    }\r\n\r\n    static String getWebpageHtml(EntityReferenceWrapper webpageWrapper) {\r\n        StringBuilder result = new StringBuilder();\r\n        CustomEntityInstance webpage = customEntityInstanceService.findByCodeByCet(\"ApplicationWebPage\",\r\n                webpageWrapper.getCode());\r\n        result.append(\"<title>\").append(webpage.getDescription()).append(\"</title>\");\r\n        if (webpage.getCfValues().getCfValue(\"stylesheets\") != null) {\r\n            Map<String, EntityReferenceWrapper> stylesheets = (Map<String, EntityReferenceWrapper>) webpage\r\n                    .getCfValues().getCfValue(\"stylesheets\").getListValue();\r\n            if (stylesheets != null && stylesheets.size() > 0) {\r\n                result.append(getStyleSheets(stylesheets));\r\n            }\r\n        }\r\n        result.append(\"</head>\").append(ln);\r\n        if (webpage.getCfValues().getCfValue(\"body\") != null) {\r\n            result.append(\"<body>\").append(ln).append(webpage.getCfValues().getCfValue(\"body\").getStringValue())\r\n                    .append(\"</body>\").append(ln);\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    static String getStyleSheets(Map<String, EntityReferenceWrapper> stylesheets) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (EntityReferenceWrapper stylesheetWrapper : stylesheets.values()) {\r\n            CustomEntityInstance stylesheet = customEntityInstanceService.findByCodeByCet(\"CSSStyleSheet\",\r\n                    stylesheetWrapper.getCode());\r\n            if (stylesheet.getCfValues().getCfValue(\"externalURL\") != null) {\r\n                result.append(\"<link rel=\\\"stylesheet\\\" href=\\\"\")\r\n                        .append(stylesheet.getCfValues().getCfValue(\"externalURL\").getStringValue()).append(\"\\\">\")\r\n                        .append(ln);\r\n            } else {\r\n                result.append(\"<style>\").append(stylesheet.getCfValues().getCfValue(\"content\").getStringValue())\r\n                        .append(\"</style>\").append(ln);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}\r\n\r\nclass WebAppScriptHelper {\r\n    private static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\r\n    private static final String EMPTY = \"\";\r\n    private static final String SPACE = \" \";\r\n    private static final String DASH = \"-\";\r\n    private static final String UNDERSCORE = \"_\";\r\n    private static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\r\n            : Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\r\n    private static final UnaryOperator<String> UPPER_CASE = word -> word.isEmpty() ? word : word.toUpperCase();\r\n    private static final UnaryOperator<String> LOWER_CASE = word -> word.isEmpty() ? word : word.toLowerCase();\r\n\r\n    private static final String convert(String input, UnaryOperator<String> mapper, String joinCharacter) {\r\n        if (input == null || input.isEmpty()) {\r\n            return \"\";\r\n        }\r\n        Pattern pattern = Pattern.compile(WORD_REGEX);\r\n        Matcher matcher = pattern.matcher(input);\r\n        String text = matcher.replaceAll(SPACE);\r\n        String[] words = text.split(SPACE);\r\n        return Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\r\n    }\r\n\r\n    static final String toTitleName(String input) {\r\n        return convert(input, TITLE_CASE, SPACE);\r\n    }\r\n\r\n    static final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\r\n\r\n    static final String toConstantName(String input) {\r\n        return convert(input, UPPER_CASE, UNDERSCORE);\r\n    }\r\n\r\n    static final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\r\n\r\n    static final String toVariableName(String input) {\r\n        String name = convert(input, TITLE_CASE, EMPTY);\r\n        return Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n    }\r\n\r\n    static final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\r\n\r\n    static final String toPascalName(String input) {\r\n        String name = convert(input, TITLE_CASE, EMPTY);\r\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n    }\r\n\r\n    static final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\r\n\r\n    static final String toTagName(String input) {\r\n        return convert(input, LOWER_CASE, DASH);\r\n    }\r\n\r\n    static final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "WebApplication",
      "name" : "Web Application",
      "description" : "Web application",
      "customEntityCategoryCode" : "APPS",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "BASE_URL",
        "description" : "Base URL",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ROOT_PATH",
        "description" : "Root path of Web Application",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 2000,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "code",
        "description" : "Code",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : true,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "entities",
        "description" : "Entities included in the Web Application",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "label",
        "description" : "Label",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "GenerateWebApp",
        "description" : "Generate Web Application based on Module code",
        "appliesTo" : "CE_WebApplication",
        "label" : "Generate Web Application",
        "script" : "org.meveo.script.GenerateWebAppScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "APPS",
      "name" : "Apps"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.RunCustomAction",
      "description" : "Run Custom Actions",
      "inputs" : [ {
        "name" : "actionCode",
        "type" : "String",
        "description" : null
      }, {
        "name" : "entityCodes",
        "type" : "List<String>",
        "description" : null
      }, {
        "name" : "uuid",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "actionCode",
        "type" : "String",
        "description" : null
      }, {
        "name" : "entityCodes",
        "type" : "List<String>",
        "description" : null
      }, {
        "name" : "uuid",
        "type" : "String",
        "description" : null
      }, {
        "name" : "defaultRepository",
        "type" : "Repository",
        "description" : null
      }, {
        "name" : "result",
        "type" : "Map<String,Object>",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.elresolver.ELException;\r\nimport org.meveo.model.crm.custom.EntityCustomAction;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.model.ICustomFieldEntity;\r\nimport org.meveo.model.IEntity;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.service.base.MeveoValueExpressionWrapper;\r\nimport org.meveo.service.custom.EntityCustomActionService;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.script.CustomScriptService;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.service.script.ScriptInstanceService;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class RunCustomAction extends Script {\r\n  private static final String MESSAGE = \"message\";\r\n  private static final Logger LOG = LoggerFactory.getLogger(RunCustomAction.class);\r\n  private EntityCustomActionService ecaService = getCDIBean(EntityCustomActionService.class);\r\n  private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  private ScriptInstanceService scriptInstanceService = getCDIBean(ScriptInstanceService.class);\r\n  private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n  private CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\r\n\r\n  private Repository repository;\r\n  private String actionCode;\r\n  private List<String> entityCodes;\r\n  private String uuid;\r\n  private Map<String, Object> result;\r\n\r\n  public String getActionCode() {\r\n    return actionCode;\r\n  }\r\n\r\n  public void setActionCode(String actionCode) {\r\n    this.actionCode = actionCode;\r\n  }\r\n\r\n  public List<String> getEntityCodes() {\r\n    return entityCodes;\r\n  }\r\n\r\n  public void setEntityCodes(List<String> entityCodes) {\r\n    this.entityCodes = entityCodes;\r\n  }\r\n\r\n  public String getUuid() {\r\n    return uuid;\r\n  }\r\n\r\n  public void setUuid(String uuid) {\r\n    this.uuid = uuid;\r\n  }\r\n\r\n  public Repository getDefaultRepository() {\r\n    if (repository == null) {\r\n      repository = repositoryService.findDefaultRepository();\r\n    }\r\n    return repository;\r\n  }\r\n\r\n  public Map<String, Object> getResult() {\r\n    return result;\r\n  }\r\n\r\n  RunCustomAction() {\r\n    super();\r\n    this.actionCode = \"\";\r\n    this.entityCodes = null;\r\n    this.uuid = \"\";\r\n    this.result = new HashMap<>();\r\n  }\r\n\r\n  @Override\r\n  public void execute(Map<String, Object> parameters) throws BusinessException {\r\n    super.execute(parameters);\r\n    LOG.debug(\"parameters: {}\", parameters);\r\n    if (this.entityCodes == null) {\r\n      throw new BusinessException(\r\n          \"No entity codes specified. Please specify at least one entity code in the parameters.\");\r\n    }\r\n    for (String entityCode : this.entityCodes) {\r\n      Map<String, Object> singleResult = new HashMap<>();\r\n      try {\r\n        CustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\r\n        Map<String, Object> entity = crossStorageService\r\n            .find(this.getDefaultRepository(), entityTemplate, this.uuid, true);\r\n        if (entity == null) {\r\n          throw new BusinessException(\r\n              \"Entity not found. CET: \" + entityCode + \" UUID: \" + this.uuid);\r\n        }\r\n        LOG.debug(\"entity: {}\", entity);\r\n        LOG.debug(\"this.actionCode: {}\", this.actionCode);\r\n        LOG.debug(\"this.entityCodes: {}\", this.entityCodes);\r\n        LOG.debug(\"this.uuid: {}\", this.uuid);\r\n\r\n        EntityCustomAction action = ecaService.findByCode(this.actionCode);\r\n        if (action == null) {\r\n          throw new BusinessException(\"Action not found: \" + this.actionCode);\r\n        }\r\n        Map<String, Object> context = new HashMap<>();\r\n        context.put(Script.CONTEXT_ACTION, this.actionCode);\r\n        Map<Object, Object> elContext = new HashMap<>(context);\r\n        elContext.put(\"entity\", entity);\r\n\r\n        LOG.debug(\"action: {}\", action);\r\n        LOG.debug(\"context: {}\", context);\r\n        LOG.debug(\"elContext: {}\", elContext);\r\n\r\n        action.getScriptParameters().forEach((key, value) -> {\r\n          try {\r\n            context.put(key, MeveoValueExpressionWrapper\r\n                .evaluateExpression(value, elContext, Object.class));\r\n          } catch (ELException e) {\r\n            LOG.error(\"Failed to evaluate el for custom action\", e);\r\n          }\r\n        });\r\n\r\n        Map<String, Object> scriptResult = scriptInstanceService\r\n            .execute(\r\n                (IEntity) CEIUtils.pojoToCei(entity),\r\n                this.getDefaultRepository(),\r\n                action.getScript().getCode(),\r\n                context);\r\n\r\n        // Display a message accordingly on what is set in result\r\n        if (scriptResult.containsKey(Script.RESULT_GUI_MESSAGE_KEY)) {\r\n          singleResult.put(MESSAGE, (String) scriptResult.get(Script.RESULT_GUI_MESSAGE_KEY));\r\n        } else if (scriptResult.containsKey(Script.RESULT_GUI_MESSAGE)) {\r\n          singleResult.put(MESSAGE, (String) scriptResult.get(Script.RESULT_GUI_MESSAGE));\r\n        } else {\r\n          singleResult.put(MESSAGE, \"Action executed successfully\");\r\n        }\r\n\r\n        if (scriptResult.containsKey(Script.RESULT_GUI_OUTCOME)) {\r\n          singleResult.put(\"value\", (String) scriptResult.get(Script.RESULT_GUI_OUTCOME));\r\n        }\r\n        result.put(entityCode, singleResult);\r\n\r\n      } catch (EntityDoesNotExistsException e) {\r\n        LOG.error(\"Failed to execute a script {} on entity {}\", this.actionCode, entityCode, e);\r\n        throw new BusinessException(\r\n            \"Failed to execute custom action: \" + this.actionCode + \" on entity: \" + entityCode, e);\r\n      } finally {\r\n        LOG.info(\"Run \" + this.actionCode + \" action done.\");\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.technicalservice.endpoint.EndpointDto",
    "dtoData" : {
      "code" : "runCustomAction",
      "description" : "Run a custom action",
      "secured" : true,
      "checkPathParams" : true,
      "serviceCode" : "org.meveo.script.RunCustomAction",
      "synchronous" : true,
      "method" : "POST",
      "parameterMappings" : [ {
        "serviceParameter" : "actionCode",
        "multivalued" : false,
        "parameterName" : "actionCode",
        "defaultValue" : null,
        "valueRequired" : true
      }, {
        "serviceParameter" : "entityCodes",
        "multivalued" : true,
        "parameterName" : "entityCodes",
        "defaultValue" : null,
        "valueRequired" : true
      }, {
        "serviceParameter" : "uuid",
        "multivalued" : false,
        "parameterName" : "uuid",
        "defaultValue" : null,
        "valueRequired" : true
      } ],
      "pathParameters" : [ ],
      "roles" : [ ],
      "returnedVariableName" : "result",
      "serializeResult" : true,
      "contentType" : "application/json",
      "basePath" : "runCustomAction",
      "path" : "/"
    }
  } ],
  "moduleDependencies" : [ ],
  "moduleFiles" : [ ]
} ]