[ {
  "active" : true,
  "code" : "WEBAPPROUTER",
  "description" : "Meveo WebApp",
  "license" : "GPL",
  "currentVersion" : "0.4.0",
  "meveoVersionBase" : "6.9.0",
  "transient" : true,
  "codeOnly" : false,
  "inDraft" : true,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.technicalservice.endpoint.EndpointDto",
    "dtoData" : {
      "code" : "webapp",
      "secured" : false,
      "checkPathParams" : false,
      "serviceCode" : "org.manaty.webapp.WebApp",
      "synchronous" : true,
      "method" : "GET",
      "parameterMappings" : [ ],
      "pathParameters" : [ "appCode" ],
      "roles" : [ ],
      "returnedVariableName" : "result",
      "serializeResult" : false
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.script.GenerateWebAppScript",
      "description" : "Generates a web app when a module is installed",
      "inputs" : [ {
        "name" : "module",
        "type" : "MeveoModule",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "module",
        "type" : "MeveoModule",
        "description" : null
      }, {
        "name" : "defaultRepository",
        "type" : "Repository",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.script;\n\nimport static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\nimport static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.StringWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.Set;\nimport java.util.Map.Entry;\nimport java.util.function.UnaryOperator;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.crm.CustomFieldTemplate;\nimport org.meveo.model.crm.custom.CustomFieldTypeEnum;\nimport org.meveo.model.customEntities.CustomEntityInstance;\nimport org.meveo.model.customEntities.CustomEntityTemplate;\nimport org.meveo.model.customEntities.WebApplication;\nimport org.meveo.model.git.GitRepository;\nimport org.meveo.model.module.MeveoModule;\nimport org.meveo.model.module.MeveoModuleItem;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.persistence.CrossStorageService;\nimport org.meveo.security.MeveoUser;\nimport org.meveo.service.admin.impl.MeveoModuleService;\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\nimport org.meveo.service.crm.impl.CustomFieldTemplateService;\nimport org.meveo.service.custom.CustomEntityTemplateService;\nimport org.meveo.service.git.GitClient;\nimport org.meveo.service.git.GitHelper;\nimport org.meveo.service.git.GitRepositoryService;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GenerateWebAppScript extends Script {\n\tprivate static final String MASTER_BRANCH = \"master\";\n\tprivate static final String MEVEO_BRANCH = \"meveo\";\n\tprivate static final String MV_TEMPLATE_REPO = \"https://github.com/meveo-org/mv-template.git\";\n\tprivate static final String LOG_SEPARATOR = \"***********************************************************\";\n\tprivate static final String SCHEMA_URL = \"api/rest/entityCustomization/entity/schema\";\n\tprivate static final String CUSTOM_TEMPLATE = CustomEntityTemplate.class.getName();\n\tprivate static final String WEB_APP_TEMPLATE = WebApplication.class.getSimpleName();\n\tprivate static final String IMPORT_STATEMENT = \"import %sSchema from \\\"%s/%s/%s\\\";\";\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GenerateWebAppScript.class);\n\tprivate String CRLF = WebAppScriptHelper.CRLF;\n\tprivate String baseUrl = null;\n\tprivate CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\n\tprivate CustomEntityTemplateService cetService = getCDIBean(CustomEntityTemplateService.class);\n\tprivate CustomFieldInstanceService cfiService = getCDIBean(CustomFieldInstanceService.class);\n\tprivate CustomFieldTemplateService cftService = getCDIBean(CustomFieldTemplateService.class);\n\tprivate GitClient gitClient = getCDIBean(GitClient.class);\n\tprivate GitRepositoryService gitRepositoryService = getCDIBean(GitRepositoryService.class);\n\tprivate MeveoModuleService meveoModuleService = getCDIBean(MeveoModuleService.class);\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n\tprivate ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n\n\tprivate Repository repository;\n\tprivate MeveoModule module = null;\n\n\tpublic MeveoModule getModule() {\n\t\treturn this.module;\n\t}\n\n\tpublic void setModule(MeveoModule module) {\n\t\tthis.module = module;\n\t}\n\n\tpublic Repository getDefaultRepository() {\n\t\tif (repository == null) {\n\t\t\trepository = repositoryService.findDefaultRepository();\n\t\t}\n\t\treturn repository;\n\t}\n\n\t@Override\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\n\t\tLOG.debug(\"START - GenerateWebAppScript.execute()\");\n\t\tsuper.execute(parameters);\n\t\tif (module == null) {\n\t\t\tmodule = (MeveoModule) parameters.get(\"module\");\n\t\t}\n\t\tLOG.debug(\"module: {}\", module);\n\t\tString moduleCode = \"WEBAPPROUTER\"; //this.module.getCode();\n\t\tLOG.debug(\"moduleCode: {}\", moduleCode);\n\t\t// this is only used when code is manually overridden\n\t\tif (module == null && moduleCode != null) {\n\t\t\tmodule = meveoModuleService.findByCode(moduleCode);\n\t\t}\n\n\t\tMeveoUser user = (MeveoUser) parameters.get(CONTEXT_CURRENT_USER);\n\t\tthis.baseUrl = (String) parameters.get(APP_BASE_URL);\n\t\tif (this.baseUrl == null) {\n\t\t\tthis.baseUrl = \"http://localhost:8080/\";\n\t\t}\n\n\t\tParamBean appConfig = paramBeanFactory.getInstance();\n\t\tString remoteUrl = appConfig.getProperty(\"meveo.git.directory.remote.url\", null);\n\t\tString remoteUsername = appConfig.getProperty(\"meveo.git.directory.remote.username\", null);\n\t\tString remotePassword = appConfig.getProperty(\"meveo.git.directory.remote.password\", null);\n\t\tString appContext = appConfig.getProperty(\"meveo.moduleName\", \"\");\n\n\t\tthis.baseUrl = this.baseUrl + appContext;\n\n\t\tLOG.debug(\"user: {}\", user);\n\t\tLOG.debug(\"baseUrl: {}\", baseUrl);\n\n\t\tif (module != null) {\n\t\t\tLOG.debug(\"Module found: {}\", module.getCode());\n\t\t\tSet<MeveoModuleItem> moduleItems = module.getModuleItems();\n\t\t\tLOG.debug(\"CUSTOM_TEMPLATE={}\", CUSTOM_TEMPLATE);\n\t\t\tList<String> entityCodes = moduleItems.stream().filter(item -> CUSTOM_TEMPLATE.equals(item.getItemClass()))\n\t\t\t\t\t.map(entity -> entity.getItemCode()).collect(Collectors.toList());\n\t\t\tLOG.debug(\"entityCodes: {}\", entityCodes);\n\n\t\t\tWebApplication webapp = crossStorageApi.find(getDefaultRepository(), WebApplication.class)\n\t\t\t\t\t.by(\"code\", module.getCode()).getResult();\n\n\t\t\t// SAVE WEB APPLICATION CEI\n\t\t\tCustomEntityInstance webApplicationCEI = new CustomEntityInstance();\n\t\t\twebApplicationCEI.setCode(moduleCode);\n\t\t\twebApplicationCEI.setCetCode(WEB_APP_TEMPLATE);\n\t\t\twebApplicationCEI.setDescription(moduleCode + \" Web Application\");\n\t\t\tif (webapp != null) {\n\t\t\t\tLOG.debug(\"UPDATE Web App CEI\");\n\t\t\t\tString uuid = webapp.getUuid();\n\t\t\t\tLOG.debug(\"uuid: {}\", uuid);\n\t\t\t\twebApplicationCEI.setUuid(uuid);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"code\", moduleCode);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"ROOT_PATH\", \"/git/\" + moduleCode);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"entities\", entityCodes);\n\t\t\t\tcfiService.setCFValue(webApplicationCEI, \"label\", WebAppScriptHelper.toTitleName(moduleCode));\n\t\t\t\tcrossStorageService.createOrUpdate(getDefaultRepository(), webApplicationCEI);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.error(\"Failed creating cei {}\", e);\n\t\t\t\tthrow new BusinessException(\"Failed creating cei \" + e.getMessage());\n\t\t\t}\n\n\t\t\t// SAVE COPY OF MV-TEMPLATE TO MEVEO GIT REPOSITORY\n\t\t\tGitRepository webappTemplateRepo = gitRepositoryService.findByCode(WEB_APP_TEMPLATE);\n\n\t\t\tif (webappTemplateRepo == null) {\n\t\t\t\tLOG.debug(\"CREATE NEW GitRepository: {}\", WEB_APP_TEMPLATE);\n\t\t\t\twebappTemplateRepo = new GitRepository();\n\t\t\t\twebappTemplateRepo.setCode(WEB_APP_TEMPLATE);\n\t\t\t\twebappTemplateRepo.setDescription(WEB_APP_TEMPLATE + \" Template repository\");\n\t\t\t\twebappTemplateRepo.setRemoteOrigin(MV_TEMPLATE_REPO);\n\t\t\t\twebappTemplateRepo.setDefaultRemoteUsername(\"\");\n\t\t\t\twebappTemplateRepo.setDefaultRemotePassword(\"\");\n\t\t\t\tgitRepositoryService.create(webappTemplateRepo);\n\t\t\t} else {\n\t\t\t\tgitClient.pull(webappTemplateRepo, \"\", \"\");\n\t\t\t}\n\n\t\t\tFile webappTemplateDirectory = GitHelper.getRepositoryDir(user, WEB_APP_TEMPLATE);\n\t\t\tPath webappTemplatePath = webappTemplateDirectory.toPath();\n\t\t\tLOG.debug(\"webappTemplate path: {}\", webappTemplatePath.toString());\n\n\t\t\t// COPY TEMPLATE INTO A SEPARATE MODULE DIRECTORY\n\t\t\tGitRepository moduleWebAppRepo = gitRepositoryService.findByCode(moduleCode);\n\n\t\t\tif (moduleWebAppRepo == null) {\n\t\t\t\tmoduleWebAppRepo = new GitRepository();\n\t\t\t\tmoduleWebAppRepo.setCode(moduleCode);\n\t\t\t\tmoduleWebAppRepo.setDescription(WebAppScriptHelper.toTitleName(moduleCode) + \" Template repository\");\n\t\t\t\tmoduleWebAppRepo.setRemoteOrigin(remoteUrl);\n\t\t\t\tmoduleWebAppRepo.setDefaultRemoteUsername(remoteUsername);\n\t\t\t\tmoduleWebAppRepo.setDefaultRemotePassword(remotePassword);\n\t\t\t\tgitRepositoryService.create(moduleWebAppRepo);\n\t\t\t}\n\n\t\t\tgitClient.checkout(moduleWebAppRepo, MEVEO_BRANCH, true);\n\t\t\tString moduleWebAppBranch = gitClient.currentBranch(moduleWebAppRepo);\n\t\t\tLOG.debug(\"moduleWebApp branch: {}\", moduleWebAppBranch);\n\n\t\t\tFile moduleWebAppDirectory = GitHelper.getRepositoryDir(user, moduleCode);\n\t\t\tPath moduleWebAppPath = moduleWebAppDirectory.toPath();\n\n\t\t\tLOG.debug(\"moduleWebApp path: {}\", moduleWebAppPath.toString());\n\n\t\t\ttry (Stream<Path> sourceStream = Files.walk(webappTemplatePath)) {\n\t\t\t\tList<Path> sources = sourceStream.collect(Collectors.toList());\n\t\t\t\tList<Path> destinations = sources.stream().map(webappTemplatePath::relativize).map(moduleWebAppPath::resolve)\n\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\t\tList<File> filesToCommit = new ArrayList<>();\n\n\t\t\t\tfor (int index = 0; index < sources.size(); index++) {\n\t\t\t\t\tPath sourcePath = sources.get(index);\n\t\t\t\t\tPath destinationPath = destinations.get(index);\n\t\t\t\t\tFile sourceFile = sourcePath.toFile();\n\t\t\t\t\tFile destinationFile = destinationPath.toFile();\n\t\t\t\t\tboolean isGitConfigFile = sourcePath.toString().contains(\"/.git/\");\n\t\t\t\t\tboolean isModelFile = sourcePath.toString().contains(\"/\" + WEB_APP_TEMPLATE + \"/model/\");\n\t\t\t\t\tboolean isDemoFile = sourcePath.toString().contains(\"/pages/Demo\");\n\t\t\t\t\tboolean isTopbar = sourcePath.toString().contains(\"/components/layout/TopbarMenu.js\");\n\n\t\t\t\t\t// COPY SPECIFIC FILES ONLY\n\t\t\t\t\tif (!sourceFile.isDirectory()) {\n\t\t\t\t\t\tFileTransformer transformer = new FileTransformer(sourcePath, destinationPath, entityCodes);\n\t\t\t\t\t\tif (isDemoFile) {\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generatePages(transformer));\n\t\t\t\t\t\t} else if (isModelFile) {\n\t\t\t\t\t\t\tfilesToCommit.addAll(this.generateModels(transformer));\n\t\t\t\t\t\t} else if (isTopbar) {\n\t\t\t\t\t\t\tFileTransformer dashboardTransformer = new FileTransformer(sourcePath, destinationPath,\n\t\t\t\t\t\t\t\t\tArrays.asList(moduleCode));\n\t\t\t\t\t\t\tList<Substitute> substitutes = new ArrayList<>();\n\t\t\t\t\t\t\tsubstitutes.add(new Substitute(\"Custom Entities\", \"%s\", WebAppScriptHelper.TITLE));\n\t\t\t\t\t\t\tfilesToCommit.addAll(dashboardTransformer.generateFiles(substitutes));\n\t\t\t\t\t\t} else if (!isGitConfigFile) {\n\t\t\t\t\t\t\tFiles.copy(sourcePath, destinationPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\n\t\t\t\t\t\t\tfilesToCommit.add(destinationFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!isGitConfigFile && !destinationFile.exists()) {\n\t\t\t\t\t\tFiles.createDirectory(destinationPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!filesToCommit.isEmpty()) {\n\t\t\t\t\tgitClient.commitFiles(moduleWebAppRepo, filesToCommit, \"Initialize Entity GUI template\");\n\t\t\t\t\t// MERGE TO MASTER IF POSSIBLE\n\t\t\t\t\tgitClient.checkout(moduleWebAppRepo, MASTER_BRANCH, true);\n\t\t\t\t\tString moduleWebAppMasterBranch = gitClient.currentBranch(moduleWebAppRepo);\n\t\t\t\t\tLOG.debug(\"switch to moduleWebApp branch: {}\", moduleWebAppMasterBranch);\n\t\t\t\t\tboolean noConflicts = gitClient.merge(moduleWebAppRepo, MEVEO_BRANCH, MASTER_BRANCH);\n\t\t\t\t\tif (noConflicts) {\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t\tLOG.info(\"*************  SUCCESSFULLY MERGED TO MASTER  *************\");\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t\tLOG.info(\"************* MERGE CONFLICTS, MERGE MANUALLY *************\");\n\t\t\t\t\t\tLOG.info(LOG_SEPARATOR);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tthrow new BusinessException(ioe);\n\t\t\t}\n\t\t}\n\t\tLOG.debug(\"END - GenerateWebAppScript.execute()\");\n\t}\n\n\tprivate List<File> generatePages(FileTransformer transformer) throws BusinessException {\n\t\tList<File> files = new ArrayList<>();\n\t\tList<Substitute> substitutes = new ArrayList<>();\n\n\t\tString source = transformer.getSource().toString();\n\t\tFile sourceFile = transformer.getSource().toFile();\n\n\t\tStringWriter writer = new StringWriter();\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(sourceFile)), writer);\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"Failed loading template:{}, with error: {}\", sourceFile, e.getMessage());\n\t\t\treturn files;\n\t\t}\n\n\t\tif (source.contains(\"ListPage.js\")) {\n\t\t\tLOG.debug(\"GENERATE LIST PAGE\");\n\t\t\tsubstitutes.add(new Substitute(\"DemoListPage\", \"%sListPage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"demo-list-page\", \"%s-list-page\", WebAppScriptHelper.TAG));\n\t\t\tsubstitutes.add(new Substitute(\"Demo\", \"%s\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"GET\", \"POST\", WebAppScriptHelper.CONSTANT));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\t\t}\n\t\tif (source.contains(\"NewPage.js\")) {\n\t\t\tLOG.debug(\"GENERATE NEW PAGE\");\n\t\t\tsubstitutes.add(new Substitute(\"DemoNewPage\", \"%sNewPage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"demo-new-page\", \"%s-new-page\", WebAppScriptHelper.TAG));\n\t\t\tsubstitutes.add(new Substitute(\"Demo\", \"%s\", WebAppScriptHelper.PASCAL));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\n\t\t}\n\t\tif (source.contains(\"UpdatePage.js\")) {\n\t\t\tLOG.debug(\"GENERATE UPDATE PAGE\");\n\t\t\tsubstitutes.add(new Substitute(\"DemoUpdatePage\", \"%sUpdatePage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"demo-update-page\", \"%s-update-page\", WebAppScriptHelper.TAG));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\t\t}\n\t\tif (source.contains(\"ViewPage.js\")) {\n\t\t\tLOG.debug(\"GENERATE VIEW PAGE\");\n\t\t\tsubstitutes.add(new Substitute(\"DemoViewPage\", \"%sViewPage\", WebAppScriptHelper.PASCAL));\n\t\t\tsubstitutes.add(new Substitute(\"demo-view-page\", \"%s-view-page\", WebAppScriptHelper.TAG));\n\t\t\tfiles = transformer.generateFiles(substitutes);\n\t\t}\n\t\treturn files;\n\t}\n\n\tprivate Set<String> iterateRefSchemas(String entityCode, Set<String> allSchemas) {\n\t\tSet<String> refSchemaCodes = allSchemas;\n\t\trefSchemaCodes.add(entityCode);\n\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\n\t\tMap<String, CustomFieldTemplate> fields = cftService.findByAppliesTo(entityTemplate.getAppliesTo());\n\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tCustomFieldTemplate field = entry.getValue();\n\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\n\t\t\tboolean isEntity = fieldEntityCode != null;\n\t\t\tboolean isAdded = refSchemaCodes.contains(key);\n\t\t\tboolean isCet = isEntity && !fieldEntityCode.contains(\".\");\n\t\t\tif (!isAdded && isCet) {\n\t\t\t\tLOG.debug(\"Adding to all schemas: {}\", refSchemaCodes);\n\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\n\t\t\t}\n\t\t}\n\t\tLOG.debug(\"Added Schemas: {}\", refSchemaCodes);\n\t\treturn refSchemaCodes;\n\t}\n\n\tprivate List<File> generateModels(FileTransformer transformer) throws BusinessException {\n\t\tList<File> files = new ArrayList<>();\n\t\tLOG.debug(\"GENERATE MODELS\");\n\t\tLOG.debug(\"source path: {}\", transformer.getSource());\n\t\tString source = transformer.getSource().toString();\n\n\t\tif (source.contains(\"Demo.js\")) {\n\t\t\tLOG.debug(\"GENERATE MODEL FILES\");\n\t\t\tString destination = transformer.getDestination().toString();\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\n\t\t\t\tString entityName = WebAppScriptHelper.toPascalName(entityCode);\n\t\t\t\tString outputFileName = entityName + \".js\";\n\t\t\t\tString destinationName = destination.replace(\"Demo.js\", outputFileName);\n\t\t\t\tLOG.debug(\"output file name: {}\", destinationName);\n\t\t\t\tStringBuilder modelImports = new StringBuilder();\n\t\t\t\tStringBuilder modelContent = new StringBuilder();\n\t\t\t\tStringBuilder refSchemas = new StringBuilder();\n\t\t\t\tStringBuilder fieldContents = new StringBuilder();\n\t\t\t\tCustomEntityTemplate entityTemplate = cetService.findByCodeOrDbTablename(entityCode);\n\t\t\t\tMap<String, CustomFieldTemplate> fields = cftService.findByAppliesTo(entityTemplate.getAppliesTo());\n\t\t\t\tSet<String> refSchemaCodes = new HashSet();\n\n\t\t\t\tmodelImports.append(\"import { getEndpoints } from \\\"utils\\\";\").append(CRLF);\n\t\t\t\tString schemaImport = String.format(IMPORT_STATEMENT, entityName, this.baseUrl, SCHEMA_URL, entityName);\n\t\t\t\tmodelImports.append(schemaImport).append(CRLF);\n\t\t\t\tString classDefinition = String.format(\"export default class %s {\", entityName);\n\t\t\t\tmodelContent.append(classDefinition).append(CRLF);\n\t\t\t\tmodelContent.append(String.format(\"\\tcode = \\\"%s\\\";\", entityName)).append(CRLF);\n\t\t\t\tString label = WebAppScriptHelper.toTitleName(entityCode);\n\t\t\t\tmodelContent.append(String.format(\"\\tlabel = \\\"%s\\\";\", label)).append(CRLF);\n\t\t\t\tmodelContent.append(String.format(\"\\tschema = %sSchema;\", entityName)).append(CRLF);\n\t\t\t\tmodelContent.append(String.format(\"\\tendpoints = getEndpoints(%sSchema, \\\"%s\\\");\", entityName, this.baseUrl))\n\t\t\t\t\t\t.append(CRLF);\n\t\t\t\trefSchemas.append(\"\\trefSchemas = [\");\n\n\t\t\t\tFormFields formFields = new FormFields();\n\t\t\t\tfor (Entry<String, CustomFieldTemplate> entry : fields.entrySet()) {\n\t\t\t\t\tCustomFieldTemplate field = entry.getValue();\n\t\t\t\t\tString fieldEntityCode = field.getEntityClazzCetCode();\n\t\t\t\t\tformFields.add(field);\n\t\t\t\t\tboolean isEntity = fieldEntityCode != null;\n\t\t\t\t\tif (isEntity && !fieldEntityCode.contains(\".\")) {\n\t\t\t\t\t\trefSchemaCodes.addAll(iterateRefSchemas(fieldEntityCode, refSchemaCodes));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trefSchemas.append(refSchemaCodes.isEmpty() ? \"\" : CRLF);\n\n\t\t\t\tfor (String refSchemaCode : refSchemaCodes) {\n\t\t\t\t\tString modelImport = String.format(IMPORT_STATEMENT, refSchemaCode, this.baseUrl, SCHEMA_URL, refSchemaCode);\n\t\t\t\t\tmodelImports.append(modelImport).append(CRLF);\n\t\t\t\t\tString refSchema = String.format(\"\\t\\t%sSchema,\", refSchemaCode);\n\t\t\t\t\trefSchemas.append(refSchema).append(CRLF);\n\t\t\t\t}\n\t\t\t\tfieldContents.append(formFields);\n\t\t\t\trefSchemas.append(\"\\t];\").append(CRLF);\n\n\t\t\t\ttry {\n\t\t\t\t\tFile outputFile = new File(destinationName);\n\t\t\t\t\tStringBuilder fullContent = new StringBuilder(modelImports).append(CRLF).append(modelContent).append(CRLF)\n\t\t\t\t\t\t\t.append(refSchemas).append(CRLF).append(fieldContents).append(\"}\").append(CRLF);\n\t\t\t\t\tFileUtils.write(outputFile, fullContent, StandardCharsets.UTF_8);\n\t\t\t\t\tfiles.add(outputFile);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (source.contains(\"index.js\")) {\n\t\t\tString destination = transformer.getDestination().toString();\n\t\t\tStringBuilder modelIndexImports = new StringBuilder();\n\t\t\tStringBuilder modelIndexExports = new StringBuilder();\n\n\t\t\tfor (String entityCode : transformer.getEntityCodes()) {\n\t\t\t\tString modelImport = String.format(\"import %s from \\\"./%s.js\\\";\", entityCode, entityCode);\n\t\t\t\tmodelIndexImports.append(modelImport).append(CRLF);\n\t\t\t\tString modelExport = String.format(\"export const %sEntity = new %s();\", entityCode, entityCode);\n\t\t\t\tmodelIndexExports.append(modelExport).append(CRLF);\n\t\t\t}\n\t\t\tmodelIndexImports.append(CRLF);\n\n\t\t\ttry {\n\t\t\t\tFile outputFile = new File(destination.toString());\n\t\t\t\tFileUtils.write(outputFile, modelIndexImports.toString() + modelIndexExports.toString(),\n\t\t\t\t\t\tStandardCharsets.UTF_8);\n\t\t\t\tfiles.add(outputFile);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new BusinessException(\"Failed creating file.\" + e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\treturn files;\n\t}\n}\n\nclass Substitute {\n\tprivate String regex = null;\n\tprivate String pattern = null;\n\tprivate UnaryOperator<String> format = null;\n\n\tpublic Substitute() {\n\t\tsuper();\n\t}\n\n\tpublic Substitute(String regex, String pattern, UnaryOperator<String> format) {\n\t\tthis.regex = regex;\n\t\tthis.pattern = pattern;\n\t\tthis.format = format;\n\t}\n\n\tpublic String getRegex() {\n\t\treturn regex;\n\t}\n\n\tpublic void setRegex(String regex) {\n\t\tthis.regex = regex;\n\t}\n\n\tpublic String getPattern() {\n\t\treturn pattern;\n\t}\n\n\tpublic void setPattern(String pattern) {\n\t\tthis.pattern = pattern;\n\t}\n\n\tpublic UnaryOperator<String> getFormat() {\n\t\treturn format;\n\t}\n\n\tpublic void setFormat(UnaryOperator<String> format) {\n\t\tthis.format = format;\n\t}\n}\n\nclass FileTransformer {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FileTransformer.class);\n\tprivate Path source = null;\n\tprivate Path destination = null;\n\tprivate List<String> entityCodes = new ArrayList<>();\n\n\tpublic FileTransformer() {\n\t\tsuper();\n\t}\n\n\tpublic FileTransformer(Path source, Path destination, List<String> entityCodes) {\n\t\tsuper();\n\t\tthis.source = source;\n\t\tthis.destination = destination;\n\t\tthis.entityCodes = entityCodes;\n\t}\n\n\tpublic Path getSource() {\n\t\treturn this.source;\n\t}\n\n\tpublic void setSource(Path source) {\n\t\tthis.source = source;\n\t}\n\n\tpublic Path getDestination() {\n\t\treturn this.destination;\n\t}\n\n\tpublic void setDestination(Path destination) {\n\t\tthis.destination = destination;\n\t}\n\n\tpublic List<String> getEntityCodes() {\n\t\treturn this.entityCodes;\n\t}\n\n\tpublic void setEntityCodes(List<String> entityCodes) {\n\t\tthis.entityCodes = entityCodes;\n\t}\n\n\tprivate String searchAndReplace(List<Substitute> substitutes, String fileContent, String entityCode) {\n\t\tif (!substitutes.isEmpty()) {\n\t\t\tfor (Substitute substitute : substitutes) {\n\t\t\t\tUnaryOperator<String> format = substitute.getFormat();\n\t\t\t\tString replacement = String.format(substitute.getPattern(), format.apply(entityCode));\n\t\t\t\tfileContent = fileContent.replaceAll(substitute.getRegex(), replacement);\n\t\t\t}\n\t\t}\n\t\treturn fileContent;\n\t}\n\n\tpublic List<File> generateFiles(List<Substitute> substitutes) throws BusinessException {\n\t\tStringWriter writer = new StringWriter();\n\t\tList<File> generatedFiles = new ArrayList<>();\n\t\ttry {\n\t\t\tIOUtils.copy(new InputStreamReader(new FileInputStream(this.source.toFile())), writer);\n\t\t\tString fileContent = writer.toString();\n\t\t\tfor (String entityCode : this.entityCodes) {\n\t\t\t\tString outputContent = searchAndReplace(substitutes, fileContent, entityCode);\n\t\t\t\tString outputFileName = destination.toString().replace(\"Demo\", WebAppScriptHelper.toPascalName(entityCode));\n\t\t\t\tLOG.debug(\"output file name: {}\", outputFileName);\n\t\t\t\tFile outputFile = new File(outputFileName);\n\t\t\t\tFileUtils.write(outputFile, outputContent, StandardCharsets.UTF_8);\n\t\t\t\tgeneratedFiles.add(outputFile);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new BusinessException(\"Failed loading js template with error: \" + e.getMessage());\n\t\t}\n\t\treturn generatedFiles;\n\t}\n}\n\nclass FormFields {\n\tprivate static final Logger LOG = LoggerFactory.getLogger(FormFields.class);\n\tprivate Set<FieldGroup> groups;\n\n\tpublic FormFields() {\n\t\tthis.groups = new HashSet<>();\n\t}\n\n\tpublic void add(CustomFieldTemplate template) {\n\t\tField field = new Field(template);\n\t\tFieldGroup newGroup = new FieldGroup(field);\n\t\tFieldGroup existingGroup = this.groups.stream().filter((group) -> group.equals(newGroup)).findFirst()\n\t\t\t\t.orElse(newGroup);\n\t\texistingGroup.add(field);\n\t\tthis.groups.add(existingGroup);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tString prefix = \"\\tformFields = [\" + WebAppScriptHelper.CRLF;\n\t\tString suffix = WebAppScriptHelper.CRLF + \"\\t];\" + WebAppScriptHelper.CRLF;\n\t\treturn this.groups.stream().sorted().map(FieldGroup::toString)\n\t\t\t\t.collect(Collectors.joining(WebAppScriptHelper.CRLF, prefix, suffix));\n\t}\n}\n\nclass FieldGroup implements Comparable<FieldGroup> {\n\tprivate String name;\n\tprivate int index;\n\tprivate List<Field> fields;\n\n\tpublic FieldGroup(Field field) {\n\t\tsuper();\n\t\tMap<String, String> guiPosition = field.getTemplate().getGuiPositionParsed();\n\t\tthis.index = Integer.parseInt(guiPosition.get(\"tab_pos\"));\n\t\tthis.name = WebAppScriptHelper.toTitleName(guiPosition.get(\"tab_name\"));\n\t\tthis.fields = new ArrayList<>();\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\n\tpublic void setIndex(int index) {\n\t\tthis.index = index;\n\t}\n\n\tpublic List<Field> getFields() {\n\t\treturn fields;\n\t}\n\n\tpublic void setFields(List<Field> fields) {\n\t\tthis.fields = fields;\n\t}\n\n\tpublic void add(Field field) {\n\t\tthis.fields.add(field);\n\t}\n\n\t@Override\n\tpublic int compareTo(FieldGroup o) {\n\t\treturn this.getIndex() - o.getIndex();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this)\n\t\t\treturn true;\n\t\tif (!(o instanceof FieldGroup)) {\n\t\t\treturn false;\n\t\t}\n\t\tFieldGroup fieldGroup = (FieldGroup) o;\n\t\treturn Objects.equals(this.getName(), fieldGroup.getName()) && this.getIndex() == fieldGroup.getIndex();\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.name, this.index);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder content = new StringBuilder(\"\\t\\t{\").append(WebAppScriptHelper.CRLF).append(\"\\t\\t\\tlabel: \\\"\")\n\t\t\t\t.append(this.name).append(\"\\\",\").append(WebAppScriptHelper.CRLF).append(\"\\t\\t\\tfields: [\")\n\t\t\t\t.append(WebAppScriptHelper.CRLF)\n\t\t\t\t.append(this.fields.stream().sorted().map(Field::toString).collect(Collectors.joining(WebAppScriptHelper.CRLF)))\n\t\t\t\t.append(WebAppScriptHelper.CRLF).append(\"\\t\\t\\t]\").append(WebAppScriptHelper.CRLF).append(\"\\t\\t},\")\n\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\treturn content.toString();\n\t}\n}\n\nclass Field implements Comparable<Field> {\n\tprivate int index;\n\tprivate String label;\n\tprivate CustomFieldTemplate template;\n\n\tpublic Field(CustomFieldTemplate template) {\n\t\tthis.template = template;\n\t\tMap<String, String> guiPosition = template.getGuiPositionParsed();\n\t\tthis.index = Integer.parseInt(guiPosition.get(\"field_pos\"));\n\t\tthis.label = WebAppScriptHelper.toTitleName(template.getCode());\n\t}\n\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\n\tpublic void setIndex(int index) {\n\t\tthis.index = index;\n\t}\n\n\tpublic String getLabel() {\n\t\treturn label;\n\t}\n\n\tpublic void setLabel(String label) {\n\t\tthis.label = label;\n\t}\n\n\tpublic CustomFieldTemplate getTemplate() {\n\t\treturn template;\n\t}\n\n\tpublic void setTemplate(CustomFieldTemplate template) {\n\t\tthis.template = template;\n\t}\n\n\t@Override\n\tpublic int compareTo(Field o) {\n\t\treturn this.getIndex() - o.getIndex();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == this)\n\t\t\treturn true;\n\t\tif (!(o instanceof Field)) {\n\t\t\treturn false;\n\t\t}\n\t\tField field = (Field) o;\n\t\treturn this.getIndex() == field.getIndex() && Objects.equals(this.getLabel(), field.getLabel());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.index, this.label);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder fieldContents = new StringBuilder();\n\t\tCustomFieldTypeEnum type = template.getFieldType();\n\t\tString defaultValue = template.getDefaultValue();\n\n\t\tfieldContents.append(\"\\t\\t\\t\\t{\").append(WebAppScriptHelper.CRLF);\n\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tcode: \\\"%s\\\",\", template.getCode())).append(WebAppScriptHelper.CRLF);\n\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tlabel: \\\"%s\\\",\", WebAppScriptHelper.toTitleName(template.getCode())))\n\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tdescription: \\\"%s\\\",\", template.getDescription()))\n\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\ttype: \\\"%s\\\",\", type)).append(WebAppScriptHelper.CRLF);\n\n\t\tif (defaultValue != null) {\n\t\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tdefault: \\\"%s\\\",\", template.getDefaultValue()))\n\t\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\t}\n\n\t\tif (type == CustomFieldTypeEnum.LONG || type == CustomFieldTypeEnum.DOUBLE) {\n\t\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tmin: \\\"%s\\\",\", template.getMinValue()))\n\t\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\tmax: \\\"%s\\\",\", template.getMaxValue()))\n\t\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\t}\n\n\t\tif (type == CustomFieldTypeEnum.LIST) {\n\t\t\tMap<String, String> listValues = template.getListValues();\n\t\t\tif (listValues != null) {\n\t\t\t\tfieldContents.append(\"\\t\\t\\t\\t\\tlistValues: {\").append(WebAppScriptHelper.CRLF);\n\t\t\t\tfor (Entry<String, String> listEntry : listValues.entrySet()) {\n\t\t\t\t\tString listValueKey = listEntry.getKey();\n\t\t\t\t\tString listValue = listEntry.getValue();\n\t\t\t\t\tfieldContents.append(String.format(\"\\t\\t\\t\\t\\t\\t%s: \\\"%s\\\",\", listValueKey, listValue))\n\t\t\t\t\t\t\t.append(WebAppScriptHelper.CRLF);\n\t\t\t\t}\n\t\t\t\tfieldContents.append(\"\\t\\t\\t\\t\\t},\").append(WebAppScriptHelper.CRLF);\n\t\t\t} else {\n\t\t\t\tfieldContents.append(\"\\t\\t\\t\\t\\tlistValues: {},\").append(WebAppScriptHelper.CRLF);\n\t\t\t}\n\t\t}\n\t\tfieldContents.append(\"\\t\\t\\t\\t},\");\n\t\treturn fieldContents.toString();\n\t}\n}\n\nclass WebAppScriptHelper {\n\tprivate static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\n\tprivate static final String EMPTY = \"\";\n\tprivate static final String SPACE = \" \";\n\tprivate static final String DASH = \"-\";\n\tprivate static final String UNDERSCORE = \"_\";\n\tprivate static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\n\t\t\t: Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\n\tprivate static final UnaryOperator<String> UPPER_CASE = word -> word.isEmpty() ? word : word.toUpperCase();\n\tprivate static final UnaryOperator<String> LOWER_CASE = word -> word.isEmpty() ? word : word.toLowerCase();\n\n\tpublic static final String CRLF = \"\\r\\n\";\n\n\tprivate static final String convert(String input, UnaryOperator<String> mapper, String joinCharacter) {\n\t\tif (input == null || input.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tPattern pattern = Pattern.compile(WORD_REGEX);\n\t\tMatcher matcher = pattern.matcher(input);\n\t\tString text = matcher.replaceAll(SPACE);\n\t\tString[] words = text.split(SPACE);\n\t\treturn Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\n\t}\n\n\tstatic final String toTitleName(String input) {\n\t\treturn convert(input, TITLE_CASE, SPACE);\n\t}\n\n\tstatic final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\n\n\tstatic final String toConstantName(String input) {\n\t\treturn convert(input, UPPER_CASE, UNDERSCORE);\n\t}\n\n\tstatic final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\n\n\tstatic final String toVariableName(String input) {\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\n\t\treturn Character.toLowerCase(name.charAt(0)) + name.substring(1);\n\t}\n\n\tstatic final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\n\n\tstatic final String toPascalName(String input) {\n\t\tString name = convert(input, TITLE_CASE, EMPTY);\n\t\treturn Character.toUpperCase(name.charAt(0)) + name.substring(1);\n\t}\n\n\tstatic final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\n\n\tstatic final String toTagName(String input) {\n\t\treturn convert(input, LOWER_CASE, DASH);\n\t}\n\n\tstatic final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\n}\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.manaty.webapp.WebApp",
      "description" : "Serve Meveo Web Application",
      "inputs" : [ {
        "name" : "appCode",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "result",
        "type" : "Object",
        "description" : null
      }, {
        "name" : "appCode",
        "type" : "String",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "/*\r\n * (C) Copyright 2018-2019 Manaty SARL (https://manaty.net) and contributors.\r\n *\r\n * This program is free software: you can redistribute it and/or modify it under the terms of the\r\n * GNU Affero General Public License as published by the Free Software Foundation, either version 3\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\r\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. This program is\r\n * not suitable for any direct or indirect application in MILITARY industry See the GNU Affero\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License along with this program.\r\n * If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage org.manaty.webapp;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.rest.technicalservice.impl.EndpointResponse;\r\nimport org.meveo.api.rest.technicalservice.impl.EndpointRequest;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.crm.EntityReferenceWrapper;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.WebApplication;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.custom.CustomEntityInstanceService;\r\nimport org.meveo.service.git.GitHelper;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.io.File;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.io.IOException;\r\nimport java.net.URLDecoder;\r\nimport java.util.Arrays;\r\nimport java.util.Map;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WebApp extends Script {\r\n\r\n    private static final int DEFAULT_BUFFER_SIZE = 10240;\r\n    private static final long DEFAULT_EXPIRE_TIME = 604800000L;\r\n    private static final String CRLF = \"\\r\\n\";\r\n    private static final String ENDPOINT_URL = \"/rest/webapp/\";\r\n    private static final String INDEX_FILE = \"index.html\";\r\n    private static final String PNG_TYPE = \"image/png\";\r\n    private static final String DEFAULT_ICON = \"https://avatars1.githubusercontent.com/u/59589948?s=200&v=4\";\r\n    private static final String INDEX_REPLACE_START = \"<!-- REPLACE TEMPLATE SECTION START -->\";\r\n    private static final String INDEX_REPLACE_END = \"<!-- REPLACE TEMPLATE SECTION END -->\";\r\n    private static final String TITLE_TEMPLATE = \"<title>%s</title>\";\r\n    private static final String FAVICON_TEMPLATE = \"<link rel=\\\"icon\\\" type=\\\"%s\\\" href=\\\"%s\\\" />\";\r\n    private static final String BASEURL_TEMPLATE = \"<base href=\\\"%s\\\" />\";\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(WebApp.class);\r\n\r\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n    private CustomEntityInstanceService ceiService = getCDIBean(CustomEntityInstanceService.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private ParamBean config = paramBeanFactory.getInstance();\r\n    private Repository repository = repositoryService.findDefaultRepository();\r\n\r\n    private EndpointRequest request;\r\n    private String basePath;\r\n    private String webappPath;\r\n    private Object result = \"\";\r\n    private String appCode = \"\";\r\n\r\n    public WebApp() {\r\n        basePath = config.getProperty(\"providers.rootDir\", File.separator + \"meveodata\");\r\n        String rootDirectory = config.getProperty(\"provider.rootDir\", \"default\");\r\n        basePath += File.separator + rootDirectory + File.separator;\r\n        webappPath = basePath + \"webapp\" + File.separator;\r\n        LOG.info(\"basePath: {}\", basePath);\r\n        LOG.info(\"webappPath: {}\", basePath);\r\n        File path = new File(webappPath);\r\n        if (!path.exists()) {\r\n            path.mkdirs();\r\n        }\r\n    }\r\n\r\n    public Object getResult() {\r\n        return result;\r\n    }\r\n\r\n    public String getAppCode() {\r\n        return appCode;\r\n    }\r\n\r\n    public void setAppCode(String appCode) {\r\n        this.appCode = appCode;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> methodContext) {\r\n        this.request = (EndpointRequest) methodContext.get(\"request\");\r\n        EndpointResponse response = (EndpointResponse) methodContext.get(\"response\");\r\n        String remainingPath = request.getRemainingPath();\r\n        LOG.info(\"appCode: \" + this.appCode);\r\n        LOG.info(\"remainingPath: \" + remainingPath);\r\n        String appPath = \"/\" + this.appCode;\r\n        String rootPath = null;\r\n        if (remainingPath.equalsIgnoreCase(appPath)) {\r\n            rootPath = webappPath;\r\n        } else {\r\n            rootPath = webappPath + this.appCode;\r\n        }\r\n        try {\r\n            // we first try to get the file from file explorer under the webapp/appCode/\r\n            // directory\r\n            File file = lookupFile(rootPath, remainingPath);\r\n            if (file == null) {\r\n                LOG.info(\"File not found in webapp, we look in git\");\r\n                File repositoryDir = GitHelper.getRepositoryDir(null, this.appCode);\r\n                rootPath = repositoryDir.getPath().toString();\r\n                file = lookupFile(rootPath, remainingPath);\r\n                // file still doesnt exist, we build it\r\n                if (file == null) {\r\n                    LOG.info(\"File not found in git, we build it\");\r\n                    WebApplication app = crossStorageApi.find(repository, WebApplication.class).by(\"code\", this.appCode)\r\n                            .getResult();\r\n                    CustomEntityInstance instance = crossStorageApi.find(repository, app.getUuid(), app.getCetCode());\r\n                    result = org.manaty.webapp.HtmlApplicationSerializer.getHtml(instance, remainingPath, ceiService);\r\n                    return;\r\n                }\r\n            }\r\n            serveFile(file, request, response);\r\n        } catch (IOException | EntityDoesNotExistsException exception) {\r\n            response.setStatus(400);\r\n            result = \"Encountered error while trying to load \" + remainingPath;\r\n        }\r\n    }\r\n\r\n    private File lookupFile(String rootPath, String remainingPath) throws java.io.IOException {\r\n        // load the file as-is at first\r\n        File file = new File(rootPath, URLDecoder.decode(remainingPath, \"UTF-8\"));\r\n        LOG.info(\"Looking for \" + remainingPath + \" in \" + rootPath);\r\n        // we attempt to load the index.html from the directory first.\r\n        if (!file.exists() || file.isDirectory()) {\r\n            if (file.isDirectory()) {\r\n                int subFolderIndex = remainingPath.indexOf(\"/\", 1);\r\n                String subFolder = subFolderIndex > -1 ? remainingPath.substring(0, subFolderIndex) : remainingPath;\r\n                LOG.info(\"Attempt to load index.html from \" + subFolder);\r\n                file = new File(rootPath, URLDecoder.decode(subFolder + File.separator + INDEX_FILE, \"UTF-8\"));\r\n            }\r\n            // default to rootPath's index.html\r\n            if (!file.exists()) {\r\n                LOG.info(\"Attempt to load index.html from \" + rootPath);\r\n                String baseIndexPath = rootPath + File.separator;\r\n                File indexTemplate = new File(baseIndexPath + INDEX_FILE);\r\n                String repoPath = GitHelper.getRepositoryDir(null, this.appCode).toPath().toString();\r\n                String rootIndex = repoPath + File.separator + INDEX_FILE;\r\n                boolean isAppIndex = indexTemplate.getAbsolutePath().contains(rootIndex);\r\n\r\n                LOG.info(\"indexPath: {}\", indexTemplate.getAbsolutePath());\r\n                LOG.info(\"repoPath: {}\", repoPath);\r\n                LOG.info(\"rootIndex: {}\", rootIndex);\r\n                LOG.info(\"isAppIndex: {}\", isAppIndex);\r\n                if (isAppIndex) {\r\n                    File generatedIndex = new File(baseIndexPath + \"generated_index.html\");\r\n                    if (!generatedIndex.exists()) {\r\n                        String indexContents = new String(Files.readAllBytes(indexTemplate.toPath()));\r\n                        int start = indexContents.indexOf(INDEX_REPLACE_START);\r\n                        int end = indexContents.indexOf(INDEX_REPLACE_END);\r\n                        String topContent = indexContents.substring(0, start);\r\n                        String endContent = indexContents.substring(end + INDEX_REPLACE_END.length());\r\n                        String title = String.format(TITLE_TEMPLATE, WebAppScriptHelper.toTitleName(this.appCode));\r\n                        String iconType = PNG_TYPE;\r\n                        String iconUrl = DEFAULT_ICON;\r\n                        String favIcon = String.format(FAVICON_TEMPLATE, iconType, iconUrl);\r\n                        String contextPath = request.getContextPath() + ENDPOINT_URL + this.appCode + \"/\";\r\n                        String baseUrl = String.format(BASEURL_TEMPLATE, contextPath);\r\n                        String newContent = topContent + CRLF + title + CRLF + favIcon + CRLF + baseUrl + CRLF\r\n                                + endContent;\r\n                        FileUtils.writeStringToFile(generatedIndex, newContent);\r\n                    }\r\n                    file = generatedIndex;\r\n                }\r\n            }\r\n            // if an index.html file does not exist in both rootPath and subdirectory, we\r\n            // return null\r\n            if (!file.exists()) {\r\n                return null;\r\n            }\r\n        }\r\n        LOG.info(\"Lookup returning file: {}\", file.toPath());\r\n        return file;\r\n    }\r\n\r\n    private void serveFile(File file, EndpointRequest request, EndpointResponse response) {\r\n        LOG.info(\"Serving file \" + file.getAbsolutePath());\r\n        // Prepare some variables. The ETag is an unique identifier of the file.\r\n        String fileName = file.getName();\r\n        long length = file.length();\r\n        long lastModified = file.lastModified();\r\n        String eTag = fileName + \"_\" + length + \"_\" + lastModified;\r\n        long expires = System.currentTimeMillis() + DEFAULT_EXPIRE_TIME;\r\n        // Validate request headers for caching\r\n        // ---------------------------------------------------\r\n        // If-None-Match header should contain \"*\" or ETag. If so, then return 304.\r\n        String ifNoneMatch = request.getHeader(\"If-None-Match\");\r\n        if (ifNoneMatch != null && matches(ifNoneMatch, eTag)) {\r\n            response.setStatus(304);\r\n            // Required in 304.\r\n            response.setHeader(\"ETag\", eTag);\r\n            // Postpone cache with 1 week.\r\n            response.setDateHeader(\"Expires\", expires);\r\n            LOG.info(\"If-None-Match\");\r\n            return;\r\n        }\r\n        // If-Modified-Since header should be greater than LastModified. If so, then\r\n        // return 304.\r\n        // This header is ignored if any If-None-Match header is specified.\r\n        long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\");\r\n        if (ifNoneMatch == null && ifModifiedSince != -1 && ifModifiedSince + 1000 > lastModified) {\r\n            response.setStatus(304);\r\n            // Required in 304.\r\n            response.setHeader(\"ETag\", eTag);\r\n            // Postpone cache with 1 week.\r\n            response.setDateHeader(\"Expires\", expires);\r\n            LOG.info(\"If-Modified-Match\");\r\n            return;\r\n        }\r\n        // Validate request headers for resume\r\n        // ----------------------------------------------------\r\n        // If-Match header should contain \"*\" or ETag. If not, then return 412.\r\n        String ifMatch = request.getHeader(\"If-Match\");\r\n        if (ifMatch != null && !matches(ifMatch, eTag)) {\r\n            response.setStatus(412);\r\n            LOG.info(\"If-Match\");\r\n            return;\r\n        }\r\n        // If-Unmodified-Since header should be greater than LastModified. If not, then\r\n        // return 412.\r\n        long ifUnmodifiedSince = request.getDateHeader(\"If-Unmodified-Since\");\r\n        if (ifUnmodifiedSince != -1 && ifUnmodifiedSince + 1000 <= lastModified) {\r\n            response.setStatus(412);\r\n            LOG.info(\"If-Unmodified-Since\");\r\n            return;\r\n        }\r\n        // Prepare and initialize response\r\n        // --------------------------------------------------------\r\n        // Get content type by file name and set default GZIP support and content\r\n        // disposition.\r\n        String contentType = request.getServletContext().getMimeType(fileName);\r\n        LOG.info(\"Servlet context found MIME=\" + contentType);\r\n        boolean acceptsGzip = false;\r\n        String disposition = \"inline\";\r\n        // To add new content types, add new mime-mapping entry in web.xml.\r\n        if (contentType == null) {\r\n            if (fileName.endsWith(\".js\")) {\r\n                contentType = \"application/javascript\";\r\n            }\r\n            contentType = \"application/octet-stream\";\r\n        }\r\n        // the browser and expand content type with the one and right character\r\n        // encoding.\r\n        if (contentType.startsWith(\"text\")) {\r\n            String acceptEncoding = request.getHeader(\"Accept-Encoding\");\r\n            acceptsGzip = acceptEncoding != null && accepts(acceptEncoding, \"gzip\");\r\n            contentType += \";charset=UTF-8\";\r\n        } else // the browser, then set to inline, else attachment which will pop a 'save as'\r\n               // dialogue.\r\n        if (!contentType.startsWith(\"image\")) {\r\n            String accept = request.getHeader(\"Accept\");\r\n            disposition = accept != null && accepts(accept, contentType) ? \"inline\" : \"attachment\";\r\n        }\r\n        LOG.info(\" content-type:\" + contentType);\r\n        // Initialize response.\r\n        response.setBufferSize(DEFAULT_BUFFER_SIZE);\r\n        response.setContentType(contentType);\r\n        response.setHeader(\"Content-Disposition\", disposition + \";filename=\\\"\" + fileName + \"\\\"\");\r\n        response.setHeader(\"Accept-Ranges\", \"bytes\");\r\n        response.setHeader(\"ETag\", eTag);\r\n        response.setDateHeader(\"Last-Modified\", lastModified);\r\n        response.setDateHeader(\"Expires\", expires);\r\n        try {\r\n            response.setOutput(Files.readAllBytes(file.toPath()));\r\n        } catch (IOException ioException) {\r\n            response.setStatus(400);\r\n            response.setErrorMessage(\"Encountered error while trying to load \" + fileName);\r\n        }\r\n    }\r\n\r\n    // Helpers (can be refactored to public utility class)\r\n    // ----------------------------------------\r\n    /**\r\n     * Returns true if the given accept header accepts the given value.\r\n     *\r\n     * @param acceptHeader The accept header.\r\n     * @param toAccept     The value to be accepted.\r\n     * @return True if the given accept header accepts the given value.\r\n     */\r\n    private static boolean accepts(String acceptHeader, String toAccept) {\r\n        String[] acceptValues = acceptHeader.split(\"\\\\s*(,|;)\\\\s*\");\r\n        Arrays.sort(acceptValues);\r\n        return Arrays.binarySearch(acceptValues, toAccept) > -1\r\n                || Arrays.binarySearch(acceptValues, toAccept.replaceAll(\"/.*$\", \"/*\")) > -1\r\n                || Arrays.binarySearch(acceptValues, \"*/*\") > -1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given match header matches the given value.\r\n     *\r\n     * @param matchHeader The match header.\r\n     * @param toMatch     The value to be matched.\r\n     * @return True if the given match header matches the given value.\r\n     */\r\n    private static boolean matches(String matchHeader, String toMatch) {\r\n        String[] matchValues = matchHeader.split(\"\\\\s*,\\\\s*\");\r\n        Arrays.sort(matchValues);\r\n        return Arrays.binarySearch(matchValues, toMatch) > -1 || Arrays.binarySearch(matchValues, \"*\") > -1;\r\n    }\r\n}\r\n\r\nclass HtmlApplicationSerializer {\r\n\r\n    static final String docType = \"<!DOCTYPE html>\";\r\n\r\n    static final String ln = System.lineSeparator();\r\n\r\n    static CustomEntityInstanceService customEntityInstanceService;\r\n\r\n    static String getHtml(CustomEntityInstance app, String remainingPath, CustomEntityInstanceService ceis) {\r\n        customEntityInstanceService = ceis;\r\n        if (app.getCfValues().getCfValue(\"webPages\") == null) {\r\n            return docType + \"<html><body><h1>\" + app.getDescription() + \"</h1></body></html>\";\r\n        }\r\n        Map<String, EntityReferenceWrapper> webpages = (Map<String, EntityReferenceWrapper>) app.getCfValues()\r\n                .getCfValue(\"webPages\").getMapValue();\r\n        EntityReferenceWrapper webpage = null;\r\n        if (webpages != null && webpages.containsKey(remainingPath)) {\r\n            webpage = webpages.get(remainingPath);\r\n        }\r\n        if (webpage == null) {\r\n            return docType + \"<html><body><h1>Page \" + remainingPath + \" not found among \"\r\n                    + app.getCfValues().getValues() + \"</h1></body></html>\";\r\n        }\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(docType).append(ln);\r\n        result.append(\"<html>\").append(ln);\r\n        result.append(\"<head>\").append(ln);\r\n        if (app.getCfValues().getCfValue(\"stylesheets\") != null) {\r\n            Map<String, EntityReferenceWrapper> stylesheets = (Map<String, EntityReferenceWrapper>) app.getCfValues()\r\n                    .getCfValue(\"stylesheets\").getListValue();\r\n            if (stylesheets != null && stylesheets.size() > 0) {\r\n                result.append(getStyleSheets(stylesheets));\r\n            }\r\n        }\r\n        result.append(getWebpageHtml(webpage));\r\n        result.append(\"</html>\").append(ln);\r\n        return result.toString();\r\n    }\r\n\r\n    static String getWebpageHtml(EntityReferenceWrapper webpageWrapper) {\r\n        StringBuilder result = new StringBuilder();\r\n        CustomEntityInstance webpage = customEntityInstanceService.findByCodeByCet(\"ApplicationWebPage\",\r\n                webpageWrapper.getCode());\r\n        result.append(\"<title>\").append(webpage.getDescription()).append(\"</title>\");\r\n        if (webpage.getCfValues().getCfValue(\"stylesheets\") != null) {\r\n            Map<String, EntityReferenceWrapper> stylesheets = (Map<String, EntityReferenceWrapper>) webpage\r\n                    .getCfValues().getCfValue(\"stylesheets\").getListValue();\r\n            if (stylesheets != null && stylesheets.size() > 0) {\r\n                result.append(getStyleSheets(stylesheets));\r\n            }\r\n        }\r\n        result.append(\"</head>\").append(ln);\r\n        if (webpage.getCfValues().getCfValue(\"body\") != null) {\r\n            result.append(\"<body>\").append(ln).append(webpage.getCfValues().getCfValue(\"body\").getStringValue())\r\n                    .append(\"</body>\").append(ln);\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    static String getStyleSheets(Map<String, EntityReferenceWrapper> stylesheets) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (EntityReferenceWrapper stylesheetWrapper : stylesheets.values()) {\r\n            CustomEntityInstance stylesheet = customEntityInstanceService.findByCodeByCet(\"CSSStyleSheet\",\r\n                    stylesheetWrapper.getCode());\r\n            if (stylesheet.getCfValues().getCfValue(\"externalURL\") != null) {\r\n                result.append(\"<link rel=\\\"stylesheet\\\" href=\\\"\")\r\n                        .append(stylesheet.getCfValues().getCfValue(\"externalURL\").getStringValue()).append(\"\\\">\")\r\n                        .append(ln);\r\n            } else {\r\n                result.append(\"<style>\").append(stylesheet.getCfValues().getCfValue(\"content\").getStringValue())\r\n                        .append(\"</style>\").append(ln);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}\r\n\r\nclass WebAppScriptHelper {\r\n    private static final String WORD_REGEX = \"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|_|\\\\s|-\";\r\n    private static final String EMPTY = \"\";\r\n    private static final String SPACE = \" \";\r\n    private static final String DASH = \"-\";\r\n    private static final String UNDERSCORE = \"_\";\r\n    private static final UnaryOperator<String> TITLE_CASE = word -> word.isEmpty() ? word\r\n            : Character.toTitleCase(word.charAt(0)) + word.substring(1).toLowerCase();\r\n    private static final UnaryOperator<String> UPPER_CASE = word -> word.isEmpty() ? word : word.toUpperCase();\r\n    private static final UnaryOperator<String> LOWER_CASE = word -> word.isEmpty() ? word : word.toLowerCase();\r\n\r\n    private static final String convert(String input, UnaryOperator<String> mapper, String joinCharacter) {\r\n        if (input == null || input.isEmpty()) {\r\n            return \"\";\r\n        }\r\n        Pattern pattern = Pattern.compile(WORD_REGEX);\r\n        Matcher matcher = pattern.matcher(input);\r\n        String text = matcher.replaceAll(SPACE);\r\n        String[] words = text.split(SPACE);\r\n        return Arrays.stream(words).map(mapper).collect(Collectors.joining(joinCharacter));\r\n    }\r\n\r\n    static final String toTitleName(String input) {\r\n        return convert(input, TITLE_CASE, SPACE);\r\n    }\r\n\r\n    static final UnaryOperator<String> TITLE = WebAppScriptHelper::toTitleName;\r\n\r\n    static final String toConstantName(String input) {\r\n        return convert(input, UPPER_CASE, UNDERSCORE);\r\n    }\r\n\r\n    static final UnaryOperator<String> CONSTANT = WebAppScriptHelper::toConstantName;\r\n\r\n    static final String toVariableName(String input) {\r\n        String name = convert(input, TITLE_CASE, EMPTY);\r\n        return Character.toLowerCase(name.charAt(0)) + name.substring(1);\r\n    }\r\n\r\n    static final UnaryOperator<String> VARIABLE = WebAppScriptHelper::toVariableName;\r\n\r\n    static final String toPascalName(String input) {\r\n        String name = convert(input, TITLE_CASE, EMPTY);\r\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n    }\r\n\r\n    static final UnaryOperator<String> PASCAL = WebAppScriptHelper::toPascalName;\r\n\r\n    static final String toTagName(String input) {\r\n        return convert(input, LOWER_CASE, DASH);\r\n    }\r\n\r\n    static final UnaryOperator<String> TAG = WebAppScriptHelper::toTagName;\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "WebApplication",
      "name" : "Web Application",
      "description" : "Web application",
      "customEntityCategoryCode" : "APPS",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "BASE_URL",
        "description" : "Base URL",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "ROOT_PATH",
        "description" : "Root path of Web Application",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 2000,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "code",
        "description" : "Code",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : true,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "entities",
        "description" : "Entities included in the Web Application",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "label",
        "description" : "Label",
        "fieldType" : "STRING",
        "accountLevel" : "CE_WebApplication",
        "appliesTo" : "CE_WebApplication",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Web Application:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "APPS",
      "name" : "Apps"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.notification.ScriptNotificationDto",
    "dtoData" : {
      "active" : true,
      "code" : "GenerateModuleWebApp",
      "classNameFilter" : "org.meveo.model.module.MeveoModule",
      "eventTypeFilter" : "POST_INSTALL",
      "scriptInstanceCode" : "org.meveo.script.GenerateWebAppScript",
      "scriptParams" : {
        "module" : "${event}"
      },
      "priority" : 1
    }
  } ],
  "moduleDependencies" : [ ],
  "moduleFiles" : [ ]
} ]